{
    "openapi": "3.0.0",
    "info": {
        "title": "Welcome to resto",
        "description": "A metadata catalog and search engine for geospatialized data",
        "version": "9.6.2"
    },
    "servers": [
        {
            "url": "http://127.0.0.1:5252",
            "description": "A metadata catalog and search engine for geospatialized data"
        }
    ],
    "paths": {
        "/auth": {
            "get": {
                "tags": [
                    "Authentication"
                ],
                "summary": "Get an authentication token",
                "description": "Get a fresh authentication token (aka rJWT).",
                "operationId": "AuthAPI::getToken",
                "responses": {
                    "200": {
                        "description": "A fresh authentication token (aka rJWT)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "token": {
                                            "description": "A rJWT token",
                                            "type": "string"
                                        },
                                        "profile": {
                                            "description": "User profile",
                                            "$ref": "#/components/schemas/UserDisplayProfile"
                                        }
                                    },
                                    "type": "object"
                                },
                                "example": {
                                    "token": "eyJzdWIiOiIxOTQ2NTIwMjk3MjEzNTI3MDUyIiwiaWF0IjoxNTQ2MjY2NTU3LCJleHAiOjE1NDYyNzAxNTd9.nI4q0LBqGOG0a6GCjxWvUiVA6hKndN9mJrjuT1WG1Xo",
                                    "profile": {
                                        "id": "1356771884787565573",
                                        "picture": "https://robohash.org/d0e907f8b6f4ee74cd4c38a515e2a4de?gravatar=hashed&bgset=any&size=400x400",
                                        "groups": [
                                            "1"
                                        ],
                                        "username": "jrom",
                                        "followers": 185,
                                        "followings": 144,
                                        "firstname": "Jérôme",
                                        "lastname": "Gasperi",
                                        "bio": "Working on new features for the next major release of SnapPlanet",
                                        "registrationdate": "2016-10-08T22:50:34.187217Z",
                                        "topics": "earth,fires,geology,glaciology,volcanism",
                                        "followed": false,
                                        "followme": false
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basicAuth": [],
                        "bearerAuth": [],
                        "queryAuth": []
                    }
                ]
            }
        },
        "/create": {
            "get": {
                "tags": [
                    "Authentication"
                ],
                "summary": "Create an authentication {token}",
                "description": "Create an authentication token (aka rJWT) for user identified by {emailOrName}",
                "operationId": "AuthAPI::createToken",
                "parameters": [
                    {
                        "name": "emailOrName",
                        "in": "query",
                        "description": "User email or user name",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "duration",
                        "in": "query",
                        "description": "Duration of token in days (default is 1 day)",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The token is created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "username": {
                                            "description": "User name",
                                            "type": "string"
                                        },
                                        "duration": {
                                            "description": "Duration of token in days",
                                            "type": "integer"
                                        },
                                        "valid_until": {
                                            "description": "Token validity",
                                            "type": "string"
                                        },
                                        "token": {
                                            "description": "Generated token",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                },
                                "example": {
                                    "userId": 100,
                                    "duration": 100,
                                    "valid_until": "2023-05-03T11:20:13",
                                    "token": "eyJzdWIiOiIxMDAiLCJpYXQiOjE2NzQ0NzI4MTMsImV4cCI6MTY4MzExMjgxM30.5fdRS1jr0fuF7HMu2oXb0sXViom39ExI2IR_FI5WK7k"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basicAuth": [],
                        "bearerAuth": [],
                        "queryAuth": []
                    }
                ]
            }
        },
        "/auth/revoke/{token}": {
            "get": {
                "tags": [
                    "Authentication"
                ],
                "summary": "Revoke an authentication {token}",
                "description": "Revoke authication token (aka rJWT). Only administrator or owne of a token can revoke it. This service should be called when user logged out from client side.",
                "operationId": "AuthAPI::revokeToken",
                "parameters": [
                    {
                        "name": "token",
                        "in": "path",
                        "description": "JWT or rJWT",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The token is revoked",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "description": "Status is *success*",
                                            "type": "string"
                                        },
                                        "message": {
                                            "description": "Message information",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                },
                                "example": {
                                    "status": "success",
                                    "message": "Token revoked"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid token",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequestError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basicAuth": [],
                        "bearerAuth": [],
                        "queryAuth": []
                    }
                ]
            }
        },
        "/auth/check/{token}": {
            "get": {
                "tags": [
                    "User"
                ],
                "summary": "Check token validity",
                "description": "Check if security token associated to user is valid. Usually security token is used to temporarely replace authentication to download/visualize ressources",
                "operationId": "checkToken",
                "parameters": [
                    {
                        "name": "token",
                        "in": "path",
                        "description": "Security token",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Return token validity",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "description": "Status is *success*",
                                            "type": "string"
                                        },
                                        "message": {
                                            "description": "Token checked",
                                            "type": "string"
                                        },
                                        "isValid": {
                                            "description": "True if valid - False if not",
                                            "type": "boolean"
                                        }
                                    },
                                    "type": "object"
                                },
                                "example": {
                                    "status": "success",
                                    "message": "Token checked",
                                    "isValid": false
                                }
                            }
                        }
                    }
                }
            }
        },
        "/auth/activate/{token}": {
            "put": {
                "tags": [
                    "User"
                ],
                "summary": "Activate a user",
                "description": "Activate registered user",
                "operationId": "activateUser",
                "parameters": [
                    {
                        "name": "token",
                        "in": "path",
                        "description": "Activation token",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Activation status - user activated or not",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "token": {
                                            "description": "Authentication token",
                                            "type": "string"
                                        },
                                        "profile": {
                                            "description": "User profile",
                                            "$ref": "#/components/schemas/UserDisplayProfile"
                                        }
                                    },
                                    "type": "object"
                                },
                                "example": {
                                    "token": "eyJzdWIiOiIxOTQ2NTIwMjk3MjEzNTI3MDUyIiwiaWF0IjoxNTQ2MjY2NTU3LCJleHAiOjE1NDYyNzAxNTd9.nI4q0LBqGOG0a6GCjxWvUiVA6hKndN9mJrjuT1WG1Xo",
                                    "profile": {
                                        "id": "1356771884787565573",
                                        "picture": "https://robohash.org/d0e907f8b6f4ee74cd4c38a515e2a4de?gravatar=hashed&bgset=any&size=400x400",
                                        "groups": [
                                            "1"
                                        ],
                                        "username": "jrom",
                                        "followers": 185,
                                        "followings": 144,
                                        "firstname": "Jérôme",
                                        "lastname": "Gasperi",
                                        "bio": "Working on new features for the next major release of SnapPlanet",
                                        "registrationdate": "2016-10-08T22:50:34.187217Z",
                                        "topics": "earth,fires,geology,glaciology,volcanism",
                                        "followed": false,
                                        "followme": false
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    }
                }
            }
        },
        "/collections": {
            "get": {
                "tags": [
                    "Collection"
                ],
                "summary": "Get collections",
                "description": "Returns a list of all collection descriptions including statistics (i.e. number of products, etc.)",
                "operationId": "CollectionsAPI::getCollections",
                "parameters": [
                    {
                        "name": "ck",
                        "in": "query",
                        "description": "Stands for *collection keyword* - limit results to collection containing the input keyword",
                        "required": false,
                        "style": "form",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of all collections",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "extent": {
                                            "type": "object",
                                            "$ref": "#/components/schemas/Extent"
                                        },
                                        "collections": {
                                            "description": "List of available collections",
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/OutputCollection"
                                            }
                                        }
                                    },
                                    "type": "object"
                                },
                                "example": {
                                    "extent": {
                                        "spatial": {
                                            "bbox": [
                                                [
                                                    -180,
                                                    -77.28054,
                                                    180,
                                                    82.77201
                                                ]
                                            ],
                                            "crs": "http://www.opengis.net/def/crs/OGC/1.3/CRS84"
                                        },
                                        "temporal": {
                                            "interval": [
                                                [
                                                    "2018-09-13T05:58:08.367000Z",
                                                    "2019-06-11T16:11:41.808000Z"
                                                ]
                                            ],
                                            "trs": "http://www.opengis.net/def/uom/ISO-8601/0/Gregorian"
                                        }
                                    },
                                    "collections": [
                                        {
                                            "id": "L8",
                                            "title": "Landsat-8",
                                            "description": "Landsat represents the world's longest continuously acquired collection of space-based moderate-resolution land remote sensing data. Four decades of imagery provides a unique resource for those who work in agriculture, geology, forestry, regional planning, education, mapping, and global change research. Landsat images are also invaluable for emergency response and disaster relief",
                                            "keywords": [
                                                "landsat",
                                                "level1C",
                                                "USGS"
                                            ],
                                            "license": "other",
                                            "extent": {
                                                "spatial": {
                                                    "bbox": [
                                                        [
                                                            -180,
                                                            -77.28054,
                                                            180,
                                                            82.77201
                                                        ]
                                                    ],
                                                    "crs": "http://www.opengis.net/def/crs/OGC/1.3/CRS84"
                                                },
                                                "temporal": {
                                                    "interval": [
                                                        [
                                                            "2019-05-19T13:59:47.695508Z",
                                                            "2019-06-06T13:28:04.338517Z"
                                                        ]
                                                    ],
                                                    "trs": "http://www.opengis.net/def/uom/ISO-8601/0/Gregorian"
                                                }
                                            },
                                            "links": [
                                                {
                                                    "rel": "self",
                                                    "type": "application/json",
                                                    "href": "http://127.0.0.1:5252/collections.json?&_pretty=1"
                                                },
                                                {
                                                    "rel": "root",
                                                    "type": "application/json",
                                                    "href": "http://127.0.0.1:5252"
                                                }
                                            ],
                                            "resto:info": {
                                                "model": "OpticalModel",
                                                "lineage": [
                                                    "DefaultModel",
                                                    "LandCoverModel",
                                                    "SatelliteModel",
                                                    "OpticalModel"
                                                ],
                                                "owner": "203883411255198721"
                                            },
                                            "summaries": {
                                                "datetime": {
                                                    "minimum": "2019-05-19T13:59:47.695508Z",
                                                    "maximum": "2019-06-06T13:28:04.338517Z"
                                                },
                                                "eo:instrument": [
                                                    "OLI_TIRS",
                                                    "TIRS"
                                                ],
                                                "eo:platform": [
                                                    "LANDSAT_8"
                                                ],
                                                "processingLevel": [
                                                    "LEVEL1C"
                                                ],
                                                "productType": [
                                                    "L1GT",
                                                    "L1TP"
                                                ],
                                                "sensorType": [
                                                    "OPTICAL"
                                                ]
                                            },
                                            "stac_version": "1.0.0",
                                            "stac_extensions": [
                                                "https://stac-extensions.github.io/eo/v1.0.0/schema.json"
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Collection"
                ],
                "summary": "Create collection",
                "operationId": "CollectionsAPI::createCollection",
                "parameters": [
                    {
                        "name": "model",
                        "in": "query",
                        "description": "Set the model for the collection (e.g. *OpticalModel*). This superseed the *model* property from the input collection description",
                        "required": false,
                        "style": "form",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Collection description",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/InputCollection"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "The collection is created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "description": "Status is *success*",
                                            "type": "string"
                                        },
                                        "message": {
                                            "description": "Message information",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                },
                                "example": {
                                    "status": "success",
                                    "message": "Collection S2 created"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Missing mandatory collection id or collection already exist",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequestError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Only user with *create* rights can create a collection",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basicAuth": [],
                        "bearerAuth": [],
                        "queryAuth": []
                    }
                ]
            }
        },
        "/collections/{collectionId}": {
            "get": {
                "tags": [
                    "Collection"
                ],
                "summary": "Get collection",
                "description": "Returns collection including statistics (i.e. number of products, etc.)",
                "operationId": "CollectionsAPI::getCollection",
                "parameters": [
                    {
                        "name": "collectionId",
                        "in": "path",
                        "description": "Collection identifier",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Collection",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OutputCollection"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Collection not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundError"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Collection"
                ],
                "summary": "Update collection",
                "description": "Note that *collectionId* and *model* properties cannot be updated",
                "operationId": "CollectionsAPI::updateCollection",
                "parameters": [
                    {
                        "name": "collectionId",
                        "in": "path",
                        "description": "Collection identifier",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Collection description",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/InputCollection"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "The collection is created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "description": "Status is *success*",
                                            "type": "string"
                                        },
                                        "message": {
                                            "description": "Message information",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                },
                                "example": {
                                    "status": "success",
                                    "message": "Collection S2 updated"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Missing mandatory collection id",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequestError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Only user with *update* rights can update a collection",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Collection not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basicAuth": [],
                        "bearerAuth": [],
                        "queryAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Collection"
                ],
                "summary": "Delete collection",
                "description": "For security reason, only empty collection can be deleted",
                "operationId": "CollectionsAPI::deleteCollection",
                "parameters": [
                    {
                        "name": "collectionId",
                        "in": "path",
                        "description": "Collection identifier",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The collection is delete",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "description": "Status is *success*",
                                            "type": "string"
                                        },
                                        "message": {
                                            "description": "Message information",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                },
                                "example": {
                                    "status": "success",
                                    "message": "Collection S2 deleted"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Missing mandatory collection id",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequestError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Only user with *update* rights can delete a collection",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Collection not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basicAuth": [],
                        "bearerAuth": [],
                        "queryAuth": []
                    }
                ]
            }
        },
        "/collections/{collectionId}/items": {
            "get": {
                "tags": [
                    "Feature"
                ],
                "summary": "Get features (search on a specific collection)",
                "description": "List of filters to search features within collection {collectionId}",
                "operationId": "FeaturesAPI::getFeaturesInCollection",
                "parameters": [
                    {
                        "name": "collectionId",
                        "in": "path",
                        "description": "Collection identifier",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Free text search - OpenSearch {searchTerms}. Can include hashtags i.e. text starting with *#* characters. In this case, use the following:\n* *#cryosphere* will search for *cryosphere*\n* *#cryosphere #atmosphere* will search for *cryosphere* AND *atmosphere*\n* *#cryosphere|atmosphere* will search for *cryosphere* OR *atmosphere*\n* *#cryosphere!* will search for *cryosphere* OR any *broader* concept of *cryosphere* ([EXTENSION][SKOS])\n* *#cryosphere\\** will search for *cryosphere* OR any *narrower* concept of *cryosphere* ([EXTENSION][SKOS])\n* *#cryosphere~* will search for *cryosphere* OR any *related* concept of *cryosphere* ([EXTENSION][SKOS])",
                        "required": false,
                        "style": "form",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Number of results returned per page - between 1 and 500 (default 20) - OpenSearch {count}",
                        "required": false,
                        "style": "form",
                        "schema": {
                            "type": "integer",
                            "default": 20,
                            "maximum": 500,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "startIndex",
                        "in": "query",
                        "description": "First result to provide - minimum 1, (default 1) - OpenSearch {startIndex}",
                        "required": false,
                        "style": "form",
                        "schema": {
                            "type": "integer",
                            "default": 1,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "First page to provide - minimum 1, (default 1) - OpenSearch {startPage}",
                        "required": false,
                        "style": "form",
                        "schema": {
                            "type": "integer",
                            "default": 1,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "lang",
                        "in": "query",
                        "description": "Two letters language code according to ISO 639-1 (default *en*) - OpenSearch {language}",
                        "required": false,
                        "style": "form",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "ids",
                        "in": "query",
                        "description": "Array of item ids to return. All other filter parameters that further restrict the number of search results (except next and limit) are ignored",
                        "required": false,
                        "style": "form",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "intersects",
                        "in": "query",
                        "description": "Region of Interest defined in GeoJSON or in Well Known Text standard (WKT) with coordinates in decimal degrees (EPSG:4326) - OpenSearch {geo:geometry}",
                        "required": false,
                        "style": "form",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "bbox",
                        "in": "query",
                        "description": "Region of Interest defined by 'west, south, east, north' coordinates of longitude, latitude, in decimal degrees (EPSG:4326) - OpenSearch {geo:box}",
                        "required": false,
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "number"
                            },
                            "maxItems": 6,
                            "minItems": 4
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "description": "[EXTENSION][egg] Location string e.g. Paris, France  or toponym identifier (i.e. geouid:xxxx) - OpenSearch {geo:name}",
                        "required": false,
                        "style": "form",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "lon",
                        "in": "query",
                        "description": "Longitude expressed in decimal degrees (EPSG:4326) - should be used with geo:lat - OpenSearch {geo:lon}",
                        "required": false,
                        "style": "form",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "lat",
                        "in": "query",
                        "description": "Latitude expressed in decimal degrees (EPSG:4326) - should be used with geo:lon - OpenSearch {geo:lat}",
                        "required": false,
                        "style": "form",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "radius",
                        "in": "query",
                        "description": "Radius expressed in meters - should be used with geo:lon and geo:lat - OpenSearch {geo:radius}",
                        "required": false,
                        "style": "form",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "datetime",
                        "in": "query",
                        "description": "Single date+time, or a range ('/' separator) of the search query. Format should follow RFC-3339 - OpenSearch {time:start}/{time:end}",
                        "required": false,
                        "style": "form",
                        "schema": {
                            "type": "string",
                            "format": "date-time",
                            "pattern": "^([0-9]{4})-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])[Tt]([01][0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9]|60)(\\.[0-9]+)?(([Zz])|([\\+|\\-]([01][0-9]|2[0-3]):[0-5][0-9]))$"
                        }
                    },
                    {
                        "name": "start",
                        "in": "query",
                        "description": "Beginning of the time slice of the search query. Format should follow RFC-3339 - OpenSearch {time:start}.",
                        "required": false,
                        "style": "form",
                        "schema": {
                            "type": "string",
                            "format": "date-time",
                            "pattern": "^[0-9]{4}-[0-9]{2}-[0-9]{2}(T[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]+)?(|Z|[\\+\\-][0-9]{2}:[0-9]{2}))?$"
                        }
                    },
                    {
                        "name": "end",
                        "in": "query",
                        "description": "End of the time slice of the search query. Format should follow RFC-3339 - OpenSearch {time:end}",
                        "required": false,
                        "style": "form",
                        "schema": {
                            "type": "string",
                            "format": "date-time",
                            "pattern": "^[0-9]{4}-[0-9]{2}-[0-9]{2}(T[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]+)?(|Z|[\\+\\-][0-9]{2}:[0-9]{2}))?$"
                        }
                    },
                    {
                        "name": "created",
                        "in": "query",
                        "description": "Returns products with metadata publication date greater or equal than *created* - OpenSearch {dc:date}",
                        "required": false,
                        "style": "form",
                        "schema": {
                            "type": "string",
                            "format": "date-time",
                            "pattern": "^[0-9]{4}-[0-9]{2}-[0-9]{2}(T[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]+)?(|Z|[\\+\\-][0-9]{2}:[0-9]{2}))?$"
                        }
                    },
                    {
                        "name": "prev",
                        "in": "query",
                        "description": "Returns features with *sort* key value greater than *prev* value - use this for pagination. The value is a unique iterator computed from the *sort* key value and provided within each feature properties as *sort_idx* property",
                        "required": false,
                        "style": "form",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "next",
                        "in": "query",
                        "description": "Returns features with *sort* key value lower than *next* value - use this for pagination. The value is a unique iterator computed from the *sort* key value and provided within each feature properties as *sort_idx* property",
                        "required": false,
                        "style": "form",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "pid",
                        "in": "query",
                        "description": "Like on product identifier",
                        "required": false,
                        "style": "form",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "sortby",
                        "in": "query",
                        "description": "Sort results by property *startDate* or *created* (default *startDate*). Sorting order is DESCENDING (ASCENDING if property is prefixed by minus sign)",
                        "required": false,
                        "style": "form",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "owner",
                        "in": "query",
                        "description": "Limit search to owner's features (i.e. resto username)",
                        "required": false,
                        "style": "form",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "likes",
                        "in": "query",
                        "description": "[EXTENSION][social] Limit search to number of likes (interval)",
                        "required": false,
                        "style": "form",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "liked",
                        "in": "query",
                        "description": "[EXTENSION][social] Return only liked features from calling user",
                        "required": false,
                        "style": "form",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "status",
                        "in": "query",
                        "description": "Feature status (unusued)",
                        "required": false,
                        "style": "form",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "productType",
                        "in": "query",
                        "description": "[MODEL][SatelliteModel] A string identifying the entry type (e.g. ER02_SAR_IM__0P, MER_RR__1P, SM_SLC__1S, GES_DISC_AIRH3STD_V005) - OpenSearch {eo:productType}",
                        "required": false,
                        "style": "form",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "processingLevel",
                        "in": "query",
                        "description": "[MODEL][SatelliteModel] A string identifying the processing level applied to the entry - OpenSearch {eo:processingLevel}",
                        "required": false,
                        "style": "form",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "platform",
                        "in": "query",
                        "description": "[MODEL][SatelliteModel] A string with the platform short name (e.g. Sentinel-1) - OpenSearch {eo:platform}",
                        "required": false,
                        "style": "form",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "instrument",
                        "in": "query",
                        "description": "[MODEL][SatelliteModel] A string identifying the instrument (e.g. MERIS, AATSR, ASAR, HRVIR. SAR) - OpenSearch {eo:instrument}",
                        "required": false,
                        "style": "form",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "sensorType",
                        "in": "query",
                        "description": "[MODEL][SatelliteModel] A string identifying the sensor type. Suggested values are: OPTICAL, RADAR, ALTIMETRIC, ATMOSPHERIC, LIMB - OpenSearch {eo:sensorType}",
                        "required": false,
                        "style": "form",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "cloudCover",
                        "in": "query",
                        "description": "[MODEL][OpticalModel] Cloud cover expressed in percent",
                        "required": false,
                        "style": "form",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "snowCover",
                        "in": "query",
                        "description": "[MODEL][OpticalModel] Snow cover expressed in percent",
                        "required": false,
                        "style": "form",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "waterCover",
                        "in": "query",
                        "description": "[MODEL][LandCoverModel] Water area expressed in percent",
                        "required": false,
                        "style": "form",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "urbanCover",
                        "in": "query",
                        "description": "[MODEL][LandCoverModel] Urban area expressed in percent",
                        "required": false,
                        "style": "form",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "iceCover",
                        "in": "query",
                        "description": "[MODEL][LandCoverModel] Ice area expressed in percent",
                        "required": false,
                        "style": "form",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "herbaceousCover",
                        "in": "query",
                        "description": "[MODEL][LandCoverModel] Herbaceous area expressed in percent",
                        "required": false,
                        "style": "form",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "forestCover",
                        "in": "query",
                        "description": "[MODEL][LandCoverModel] Forest area expressed in percent",
                        "required": false,
                        "style": "form",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "floodedCover",
                        "in": "query",
                        "description": "[MODEL][LandCoverModel] Flooded area expressed in percent",
                        "required": false,
                        "style": "form",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "desertCover",
                        "in": "query",
                        "description": "[MODEL][LandCoverModel] Desert area expressed in percent",
                        "required": false,
                        "style": "form",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "cultivatedCover",
                        "in": "query",
                        "description": "[MODEL][LandCoverModel] Cultivated area expressed in percent",
                        "required": false,
                        "style": "form",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "_heatmapNoGeo",
                        "in": "query",
                        "description": "[EXTENSION][Heatmap] True to compute search result heatmap without taking account geographical filter",
                        "required": false,
                        "style": "form",
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Features collection",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestoFeatureCollection"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request (i.e. invalid parameter)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequestError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Collection not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundError"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Collection"
                ],
                "summary": "Add feature(s) to collection",
                "operationId": "CollectionsAPI::insertFeatures",
                "parameters": [
                    {
                        "name": "collectionId",
                        "in": "path",
                        "description": "Collection identifier",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "tolerance",
                        "in": "query",
                        "description": "Simplify input geometry with tolerance in degrees (use in conjunction with *maxpoints*). [IMPORTANT] Simplification only affects the internal indexed geometry used by the search engine. The original geometry is stored unmodified.",
                        "required": false,
                        "style": "form",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "maxpoints",
                        "in": "query",
                        "description": "If tolerance is set, geometry simplification of input geometry is performed only if the number of geometry vertices is greater than *maxpoints*",
                        "required": false,
                        "style": "form",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "_splitGeom",
                        "in": "query",
                        "description": "Superseed the SPLIT_GEOMETRY_ON_DATELINE configuration i.e. set to true to split geometry during feature insertion - false otherwise. Default is set to SPLIT_GEOMETRY_ON_DATELINE",
                        "required": false,
                        "style": "form",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "_useItag",
                        "in": "query",
                        "description": "[ADDON][Tag] Set to false to not use iTag during feature insertion. Default is true",
                        "required": false,
                        "style": "form",
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Either a GeoJSON Feature or a GeoJSON FeatureCollection",
                    "content": {
                        "application/json": {
                            "schema": {
                                "oneOf": [
                                    {
                                        "$ref": "#/components/schemas/InputFeatureCollection"
                                    },
                                    {
                                        "$ref": "#/components/schemas/InputFeature"
                                    }
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Feature is inserted within collection",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "description": "Status is *success*",
                                            "type": "string"
                                        },
                                        "message": {
                                            "description": "Message information",
                                            "type": "string"
                                        },
                                        "collection": {
                                            "description": "Collection identifier in which feature is inserted",
                                            "type": "string"
                                        },
                                        "featureId": {
                                            "description": "Newly created feature identifier",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                },
                                "example": {
                                    "status": "success",
                                    "message": "Feature inserted",
                                    "collection": "S2",
                                    "featureId": "c4f6ed9f-35ba-5c85-8449-e437c14ae428"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid feature description",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequestError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Only user with *update* rights can add feature to collection",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Feature is already present in database",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ConflictError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Collection not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basicAuth": [],
                        "bearerAuth": [],
                        "queryAuth": []
                    }
                ]
            }
        },
        "/collections/{collectionId}/items/{featureId}": {
            "get": {
                "tags": [
                    "Feature"
                ],
                "summary": "Get feature",
                "description": "Returns feature {featureId} metadata",
                "operationId": "FeaturesAPI::getFeature",
                "parameters": [
                    {
                        "name": "collectionId",
                        "in": "path",
                        "description": "Collection identifier",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "featureId",
                        "in": "path",
                        "description": "Feature identifier",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Comma separated list of property fields to be returned. The following reserved keywords can also be used:\n* _all: Return all properties (This is the default)\n* _simple: Return all fields except *keywords* property",
                        "required": false,
                        "style": "form",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Feature metadata",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OutputFeature"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Feature not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": [],
                        "bearerAuth": [],
                        "queryAuth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Feature"
                ],
                "summary": "Update feature property",
                "description": "Update feature {featureId}",
                "operationId": "FeaturesAPI::updateFeature",
                "parameters": [
                    {
                        "name": "collectionId",
                        "in": "path",
                        "description": "Collection identifier",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "featureId",
                        "in": "path",
                        "description": "Feature identifier",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Feature description",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/InputFeature"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "The feature is updated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "description": "Status is *success*",
                                            "type": "string"
                                        },
                                        "message": {
                                            "description": "Message information",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                },
                                "example": {
                                    "status": "success",
                                    "message": "Update feature b9eeaf6b-9868-5418-9455-3e77cd349e21"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid property",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequestError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Feature not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basicAuth": [],
                        "bearerAuth": [],
                        "queryAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Feature"
                ],
                "summary": "Delete feature",
                "description": "Delete feature {featureId}",
                "operationId": "FeaturesAPI::deleteFeature",
                "parameters": [
                    {
                        "name": "collectionId",
                        "in": "path",
                        "description": "Collection identifier",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "featureId",
                        "in": "path",
                        "description": "Feature identifier",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The feature is delete",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "description": "Status is *success*",
                                            "type": "string"
                                        },
                                        "message": {
                                            "description": "Message information",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                },
                                "example": {
                                    "status": "success",
                                    "message": "Feature 7e5caa78-5127-53e5-97ff-ddf44984ef56 deleted"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Missing mandatory feature identifier",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequestError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Only user with *update* rights can delete a feature",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Feature not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basicAuth": [],
                        "bearerAuth": [],
                        "queryAuth": []
                    }
                ]
            }
        },
        "/collections/{collectionId}/items/{featureId}/properties": {
            "put": {
                "tags": [
                    "Feature"
                ],
                "summary": "Update feature properties",
                "description": "Update properties for feature {featureId}. Allowed properties are one of : title, description, visibility, owner and status",
                "operationId": "FeaturesAPI::updateFeatureProperties",
                "parameters": [
                    {
                        "name": "collectionId",
                        "in": "path",
                        "description": "Collection identifier",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "featureId",
                        "in": "path",
                        "description": "Feature identifier",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Properties to update",
                    "content": {
                        "application/json": {
                            "schema": {}
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "The properties are updated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "description": "Status is *success*",
                                            "type": "string"
                                        },
                                        "message": {
                                            "description": "Message information",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                },
                                "example": {
                                    "status": "success",
                                    "message": "Update property for feature b9eeaf6b-9868-5418-9455-3e77cd349e21"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid property",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequestError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Feature not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basicAuth": [],
                        "bearerAuth": [],
                        "queryAuth": []
                    }
                ]
            }
        },
        "/groups": {
            "get": {
                "tags": [
                    "Group"
                ],
                "summary": "Get groups",
                "description": "The list is ordered by most recently created",
                "operationId": "GroupAPI::getGroups",
                "parameters": [
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Filter by group name",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of groups",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "totalResults": {
                                            "description": "Total number of groups",
                                            "type": "integer"
                                        },
                                        "results": {
                                            "description": "Return groups",
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/OutputGroup"
                                            }
                                        }
                                    },
                                    "type": "object"
                                },
                                "example": {
                                    "totalResults": 2,
                                    "groups": [
                                        {
                                            "id": 100,
                                            "name": "My first group",
                                            "description": "Any user can create a group."
                                        },
                                        {
                                            "id": 101,
                                            "name": "My second group",
                                            "description": "Any user can create a group."
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basicAuth": [],
                        "bearerAuth": [],
                        "queryAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Group"
                ],
                "summary": "Create group",
                "description": "Create a group from name - the name must be unique",
                "operationId": "GroupAPI::createGroup",
                "requestBody": {
                    "description": "Group description",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "name"
                                ],
                                "properties": {
                                    "name": {
                                        "description": "Unique name for the group",
                                        "type": "string"
                                    },
                                    "description": {
                                        "description": "",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            "example": {
                                "name": "My first group",
                                "description": "Any user can create a group."
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Group is created and unique identifier is returned",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "description": "Status is *success*",
                                            "type": "string"
                                        },
                                        "message": {
                                            "description": "Group created",
                                            "type": "string"
                                        },
                                        "id": {
                                            "description": "Newly created group identifier",
                                            "type": "integer"
                                        }
                                    },
                                    "type": "object"
                                },
                                "example": {
                                    "status": "success",
                                    "message": "Group created",
                                    "id": 100
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "This group already exist",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequestError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basicAuth": [],
                        "bearerAuth": [],
                        "queryAuth": []
                    }
                ]
            }
        },
        "/groups/{name}": {
            "get": {
                "tags": [
                    "Group"
                ],
                "summary": "Get group",
                "operationId": "GroupAPI::getGroup",
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "description": "Group name",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User group",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OutputGroup"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basicAuth": [],
                        "bearerAuth": [],
                        "queryAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Group"
                ],
                "summary": "Delete group",
                "description": "Only administrator and owner of a group can delete it",
                "operationId": "GroupAPI::deleteGroup",
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "description": "Group name",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The group is delete",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "description": "Status is *success*",
                                            "type": "string"
                                        },
                                        "message": {
                                            "description": "Message information",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                },
                                "example": {
                                    "status": "success",
                                    "message": "Delete group xxxx"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Missing mandatory group identifier",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequestError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Group not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basicAuth": [],
                        "bearerAuth": [],
                        "queryAuth": []
                    }
                ]
            }
        },
        "/groups/{name}/users": {
            "post": {
                "tags": [
                    "Group"
                ],
                "summary": "Add a user",
                "description": "Add a user to a group",
                "operationId": "GroupAPI::addUser",
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "description": "Group name",
                        "required": true,
                        "schema": {
                            "type": "name"
                        }
                    }
                ],
                "requestBody": {
                    "description": "User info",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "name"
                                ],
                                "properties": {
                                    "username": {
                                        "description": "User name",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            "example": {
                                "username": "johndoe"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "User is added",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "description": "Status is *success*",
                                            "type": "string"
                                        },
                                        "message": {
                                            "description": "User added",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                },
                                "example": {
                                    "status": "success",
                                    "message": "User added"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basicAuth": [],
                        "bearerAuth": [],
                        "queryAuth": []
                    }
                ]
            }
        },
        "/users/{username}/groups": {
            "get": {
                "tags": [
                    "User"
                ],
                "summary": "Get user's groups",
                "operationId": "GroupAPI::getUserGroups",
                "parameters": [
                    {
                        "name": "username",
                        "in": "path",
                        "description": "User's name",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User groups",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "id": {
                                            "description": "User identifier",
                                            "type": "string"
                                        },
                                        "groups": {
                                            "description": "Array of user's groups",
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/OutputGroup"
                                            }
                                        }
                                    },
                                    "type": "object"
                                },
                                "example": {
                                    "id": "1356771884787565573",
                                    "groups": [
                                        {
                                            "id": "1",
                                            "name": "default",
                                            "description": "Default group"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basicAuth": [],
                        "bearerAuth": [],
                        "queryAuth": []
                    }
                ]
            }
        },
        "/users/{username}/rights": {
            "get": {
                "tags": [
                    "Rights"
                ],
                "summary": "Get user rights",
                "operationId": "RightsAPI::getUserRights",
                "parameters": [
                    {
                        "name": "username",
                        "in": "path",
                        "description": "User name",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User rights",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Rights"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basicAuth": [],
                        "bearerAuth": [],
                        "queryAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Rights"
                ],
                "summary": "Set rights for user",
                "description": "Set rights for a given user",
                "operationId": "RightsAPI::setUserRights",
                "parameters": [
                    {
                        "name": "username",
                        "in": "path",
                        "description": "User name",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Rights to create/udpated",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Rights"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Rights is created or updated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "description": "Status is *success*",
                                            "type": "string"
                                        },
                                        "message": {
                                            "description": "Rights updated",
                                            "type": "string"
                                        },
                                        "rights": {
                                            "description": "Set rights"
                                        }
                                    },
                                    "type": "object"
                                },
                                "example": {
                                    "status": "success",
                                    "message": "Rights updated",
                                    "rights": {
                                        "createCollection": false,
                                        "deleteCollection": true,
                                        "updateCollection": true,
                                        "deleteAnyCollection": false,
                                        "updateAnyCollection": false,
                                        "createItem": true,
                                        "updateItem": true,
                                        "deleteItem": true,
                                        "createAnyItem": false,
                                        "deleteAnyItem": false,
                                        "updateAnyItem": false
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Rights is not set",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequestError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basicAuth": [],
                        "bearerAuth": [],
                        "queryAuth": []
                    }
                ]
            }
        },
        "/groups/{name}/rights": {
            "get": {
                "tags": [
                    "Rights"
                ],
                "summary": "Get group rights",
                "operationId": "RightsAPI::getGroupRights",
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "description": "Group name",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Group rights",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Rights"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basicAuth": [],
                        "bearerAuth": [],
                        "queryAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Rights"
                ],
                "summary": "Set rights for group",
                "description": "Set rights for a given group",
                "operationId": "RightsAPI::setGroupRights",
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "description": "Group name",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Rights to create/udpated",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Rights"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Rights is created or updated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "description": "Status is *success*",
                                            "type": "string"
                                        },
                                        "message": {
                                            "description": "Rights updated",
                                            "type": "string"
                                        },
                                        "rights": {
                                            "description": "Created/update rights"
                                        }
                                    },
                                    "type": "object"
                                },
                                "example": {
                                    "status": "success",
                                    "message": "Rights updated",
                                    "rights": {
                                        "createCollection": false,
                                        "deleteCollection": true,
                                        "updateCollection": true,
                                        "deleteAnyCollection": false,
                                        "updateAnyCollection": false,
                                        "createItem": true,
                                        "updateItem": true,
                                        "deleteItem": true,
                                        "createAnyItem": false,
                                        "deleteAnyItem": false,
                                        "updateAnyItem": false,
                                        "downloadItem": false
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Rights is not set",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequestError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basicAuth": [],
                        "bearerAuth": [],
                        "queryAuth": []
                    }
                ]
            }
        },
        "/catalogs/*": {
            "get": {
                "tags": [
                    "STAC"
                ],
                "summary": "Get STAC catalogs",
                "description": "Get STAC catalogs",
                "operationId": "STACAPI::getCatalogs",
                "parameters": [
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Filter on catalog id and description",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "_countCatalogs",
                        "in": "query",
                        "description": "Set to 1 to not count number of items below catalogs. Speed up *a lot* the query so should be used when using this for suggest (see rocket catalog search for instance)",
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "STAC catalog definition - contains links to child catalogs and/or items",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Catalog"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "STAC"
                ],
                "summary": "Update catalog",
                "description": "Update catalog",
                "operationId": "STACAPI::updateCatalog",
                "parameters": [
                    {
                        "name": "catalogId",
                        "in": "path",
                        "description": "Catalog identifier",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Catalog fields to be update limited to title and description",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Catalog"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Catalog is updated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "description": "Status is *success*",
                                            "type": "string"
                                        },
                                        "message": {
                                            "description": "Message information",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                },
                                "example": {
                                    "status": "success",
                                    "message": "Catalog updated"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Only user with *updateCatalog* rights can update a catalog",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basicAuth": [],
                        "bearerAuth": [],
                        "queryAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "STAC"
                ],
                "summary": "Add a STAC catalog",
                "description": "Add a STAC catalog",
                "operationId": "STACAPI::addCatalog",
                "requestBody": {
                    "description": "A valid STAC Catalog",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Catalog"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "The catalog is created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "description": "Status is *success*",
                                            "type": "string"
                                        },
                                        "message": {
                                            "description": "Message information",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                },
                                "example": {
                                    "status": "success",
                                    "message": "Catalog created"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Missing one of the mandatory input property",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequestError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Only user with *createCatalog* rights can create a catalog",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basicAuth": [],
                        "bearerAuth": [],
                        "queryAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "STAC"
                ],
                "summary": "Delete catalog",
                "description": "Delete catalog",
                "operationId": "STACAPI::removeCatalog",
                "parameters": [
                    {
                        "name": "catalogId",
                        "in": "path",
                        "description": "Catalog identifier",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Catalog deleted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "description": "Status is *success*",
                                            "type": "string"
                                        },
                                        "message": {
                                            "description": "Message information",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                },
                                "example": {
                                    "status": "success",
                                    "message": "Catalog deleted",
                                    "featuresUpdated": 345
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Only user with *deleteCatalog* rights can delete a catalog",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basicAuth": [],
                        "bearerAuth": [],
                        "queryAuth": []
                    }
                ]
            }
        },
        "/assets/{urlInBase64}": {
            "get": {
                "tags": [
                    "STAC"
                ],
                "summary": "Download asset",
                "description": "Return the asset href within an HTTP 301 Redirect message. This allows to keep track of download of external assets in resto statistics",
                "operationId": "STACAPI::getAsset",
                "parameters": [
                    {
                        "name": "urlInBase64",
                        "in": "path",
                        "description": "Asset url encoded in Base64",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "301": {
                        "description": "HTTP/1.1 301 Moved Permanently"
                    },
                    "400": {
                        "description": "Invalid base64 encoded url"
                    }
                }
            }
        },
        "/children": {
            "get": {
                "tags": [
                    "STAC"
                ],
                "summary": "Get root child catalogs",
                "description": "List of children of this catalog",
                "operationId": "STACAPI::getChildren",
                "responses": {
                    "200": {
                        "description": "List of children of the root catalog",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "features": {
                                            "description": "Array of features",
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/OutputFeature"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/queryables": {
            "get": {
                "tags": [
                    "STAC"
                ],
                "summary": "Queryables for STAC API",
                "description": "Queryable names for the STAC API Item Search filter.",
                "operationId": "STACAPI::getQueryables",
                "responses": {
                    "200": {
                        "description": "Queryables for STAC API",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Queryables"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/search": {
            "get": {
                "tags": [
                    "Feature"
                ],
                "summary": "STAC search endpoint",
                "description": "List of filters to search features within all collections",
                "operationId": "STACAPI::search",
                "parameters": [
                    {
                        "name": "model",
                        "in": "query",
                        "description": "Search features within collections belonging to *model* - e.g. *model=SatelliteModel* will search in all satellite collections",
                        "required": false,
                        "style": "form",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "collections",
                        "in": "query",
                        "description": "Search features within collections - comma separated list of collection identifiers",
                        "required": false,
                        "style": "form",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "ck",
                        "in": "query",
                        "description": "Stands for *collection keyword* - limit results to collection containing the input keyword",
                        "required": false,
                        "style": "form",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Free text search - OpenSearch {searchTerms}. Example:\n* *cryosphere* will search for *cryosphere*\n* *cryosphere atmosphere* will search for *cryosphere* AND *atmosphere*\n* *cryosphere|atmosphere* will search for *cryosphere* OR *atmosphere*\n* *cryosphere!* will search for *cryosphere* OR any *broader* concept of *cryosphere* ([EXTENSION][SKOS])\n* *cryosphere\\** will search for *cryosphere* OR any *narrower* concept of *cryosphere* ([EXTENSION][SKOS])\n* *cryosphere~* will search for *cryosphere* OR any *related* concept of *cryosphere* ([EXTENSION][SKOS])",
                        "required": false,
                        "style": "form",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "description",
                        "in": "query",
                        "description": "Keyword search on feature description field",
                        "required": false,
                        "style": "form",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Number of results returned per page - between 1 and 500 (default 20) - OpenSearch {count}",
                        "required": false,
                        "style": "form",
                        "schema": {
                            "type": "integer",
                            "default": 20,
                            "maximum": 500,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "startIndex",
                        "in": "query",
                        "description": "First result to provide - minimum 1, (default 1) - OpenSearch {startIndex}",
                        "required": false,
                        "style": "form",
                        "schema": {
                            "type": "integer",
                            "default": 1,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "First page to provide - minimum 1, (default 1) - OpenSearch {startPage}",
                        "required": false,
                        "style": "form",
                        "schema": {
                            "type": "integer",
                            "default": 1,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "lang",
                        "in": "query",
                        "description": "Two letters language code according to ISO 639-1 (default *en*) - OpenSearch {language}",
                        "required": false,
                        "style": "form",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "ids",
                        "in": "query",
                        "description": "Array of item ids to return. All other filter parameters that further restrict the number of search results (except next and limit) are ignored",
                        "required": false,
                        "style": "form",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "intersects",
                        "in": "query",
                        "description": "Region of Interest defined in GeoJSON or in Well Known Text standard (WKT) with coordinates in decimal degrees (EPSG:4326) - OpenSearch {geo:geometry}",
                        "required": false,
                        "style": "form",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "bbox",
                        "in": "query",
                        "description": "Region of Interest defined by 'west, south, east, north' coordinates of longitude, latitude, in decimal degrees (EPSG:4326) - OpenSearch {geo:box}",
                        "required": false,
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "number"
                            },
                            "maxItems": 6,
                            "minItems": 4
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "description": "[EXTENSION][egg] Location string e.g. Paris, France  or toponym identifier (i.e. geouid:xxxx) - OpenSearch {geo:name}",
                        "required": false,
                        "style": "form",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "lon",
                        "in": "query",
                        "description": "Longitude expressed in decimal degrees (EPSG:4326) - should be used with geo:lat - OpenSearch {geo:lon}",
                        "required": false,
                        "style": "form",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "lat",
                        "in": "query",
                        "description": "Latitude expressed in decimal degrees (EPSG:4326) - should be used with geo:lon - OpenSearch {geo:lat}",
                        "required": false,
                        "style": "form",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "radius",
                        "in": "query",
                        "description": "Radius expressed in meters - should be used with geo:lon and geo:lat - OpenSearch {geo:radius}",
                        "required": false,
                        "style": "form",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "datetime",
                        "in": "query",
                        "description": "Single date+time, or a range ('/' separator) of the search query. Format should follow RFC-3339 - OpenSearch {time:start}/{time:end}",
                        "required": false,
                        "style": "form",
                        "schema": {
                            "type": "string",
                            "format": "date-time",
                            "pattern": "^([0-9]{4})-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])[Tt]([01][0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9]|60)(\\.[0-9]+)?(([Zz])|([\\+|\\-]([01][0-9]|2[0-3]):[0-5][0-9]))$"
                        }
                    },
                    {
                        "name": "start",
                        "in": "query",
                        "description": "Beginning of the time slice of the search query. Format should follow RFC-3339 - OpenSearch {time:start}",
                        "required": false,
                        "style": "form",
                        "schema": {
                            "type": "string",
                            "format": "date-time",
                            "pattern": "^[0-9]{4}-[0-9]{2}-[0-9]{2}(T[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]+)?(|Z|[\\+\\-][0-9]{2}:[0-9]{2}))?$"
                        }
                    },
                    {
                        "name": "end",
                        "in": "query",
                        "description": "End of the time slice of the search query. Format should follow RFC-3339 - OpenSearch {time:end}",
                        "required": false,
                        "style": "form",
                        "schema": {
                            "type": "string",
                            "format": "date-time",
                            "pattern": "^[0-9]{4}-[0-9]{2}-[0-9]{2}(T[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]+)?(|Z|[\\+\\-][0-9]{2}:[0-9]{2}))?$"
                        }
                    },
                    {
                        "name": "created",
                        "in": "query",
                        "description": "Returns products with metadata creation date greater or equal than *created* - OpenSearch {dc:date}",
                        "required": false,
                        "style": "form",
                        "schema": {
                            "type": "string",
                            "format": "date-time",
                            "pattern": "^[0-9]{4}-[0-9]{2}-[0-9]{2}(T[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]+)?(|Z|[\\+\\-][0-9]{2}:[0-9]{2}))?$"
                        }
                    },
                    {
                        "name": "prev",
                        "in": "query",
                        "description": "Returns features with *sort* key value greater than *prev* value - use this for pagination. The value is a unique iterator computed from the *sort* key value and provided within each feature properties as *sort_idx* property",
                        "required": false,
                        "style": "form",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "next",
                        "in": "query",
                        "description": "Returns features with *sort* key value lower than *next* value - use this for pagination. The value is a unique iterator computed from the *sort* key value and provided within each feature properties as *sort_idx* property",
                        "required": false,
                        "style": "form",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "pid",
                        "in": "query",
                        "description": "Like on product identifier",
                        "required": false,
                        "style": "form",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "sortby",
                        "in": "query",
                        "description": "Sort results by property *startDate* or *created* (default *startDate*). Sorting order is DESCENDING (ASCENDING if property is prefixed by minus sign)",
                        "required": false,
                        "style": "form",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "owner",
                        "in": "query",
                        "description": "Limit search to owner's features (i.e. resto username)",
                        "required": false,
                        "style": "form",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "likes",
                        "in": "query",
                        "description": "[EXTENSION][social] Limit search to number of likes (interval)",
                        "required": false,
                        "style": "form",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "liked",
                        "in": "query",
                        "description": "[EXTENSION][social] Return only liked features from calling user",
                        "required": false,
                        "style": "form",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "status",
                        "in": "query",
                        "description": "Feature status (unusued)",
                        "required": false,
                        "style": "form",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "productType",
                        "in": "query",
                        "description": "[MODEL][SatelliteModel] A string identifying the entry type (e.g. ER02_SAR_IM__0P, MER_RR__1P, SM_SLC__1S, GES_DISC_AIRH3STD_V005) - OpenSearch {eo:productType}",
                        "required": false,
                        "style": "form",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "processingLevel",
                        "in": "query",
                        "description": "[MODEL][SatelliteModel] A string identifying the processing level applied to the entry - OpenSearch {eo:processingLevel}",
                        "required": false,
                        "style": "form",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "platform",
                        "in": "query",
                        "description": "[MODEL][SatelliteModel] A string with the platform short name (e.g. Sentinel-1) - OpenSearch {eo:platform}",
                        "required": false,
                        "style": "form",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "instrument",
                        "in": "query",
                        "description": "[MODEL][SatelliteModel] A string identifying the instrument (e.g. MERIS, AATSR, ASAR, HRVIR. SAR) - OpenSearch {eo:instrument}",
                        "required": false,
                        "style": "form",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "sensorType",
                        "in": "query",
                        "description": "[MODEL][SatelliteModel] A string identifying the sensor type. Suggested values are: OPTICAL, RADAR, ALTIMETRIC, ATMOSPHERIC, LIMB - OpenSearch {eo:sensorType}",
                        "required": false,
                        "style": "form",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "cloudCover",
                        "in": "query",
                        "description": "[MODEL][OpticalModel] Cloud cover expressed in percent",
                        "required": false,
                        "style": "form",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "snowCover",
                        "in": "query",
                        "description": "[MODEL][OpticalModel] Snow cover expressed in percent",
                        "required": false,
                        "style": "form",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "waterCover",
                        "in": "query",
                        "description": "[MODEL][LandCoverModel] Water area expressed in percent",
                        "required": false,
                        "style": "form",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "urbanCover",
                        "in": "query",
                        "description": "[MODEL][LandCoverModel] Urban area expressed in percent",
                        "required": false,
                        "style": "form",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "iceCover",
                        "in": "query",
                        "description": "[MODEL][LandCoverModel] Ice area expressed in percent",
                        "required": false,
                        "style": "form",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "herbaceousCover",
                        "in": "query",
                        "description": "[MODEL][LandCoverModel] Herbaceous area expressed in percent",
                        "required": false,
                        "style": "form",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "forestCover",
                        "in": "query",
                        "description": "[MODEL][LandCoverModel] Forest area expressed in percent",
                        "required": false,
                        "style": "form",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "floodedCover",
                        "in": "query",
                        "description": "[MODEL][LandCoverModel] Flooded area expressed in percent",
                        "required": false,
                        "style": "form",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "desertCover",
                        "in": "query",
                        "description": "[MODEL][LandCoverModel] Desert area expressed in percent",
                        "required": false,
                        "style": "form",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "cultivatedCover",
                        "in": "query",
                        "description": "[MODEL][LandCoverModel] Cultivated area expressed in percent",
                        "required": false,
                        "style": "form",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Comma separated list of property fields to be returned. The following reserved keywords can also be used:\n* _all: Return all properties (This is the default)\n* _simple: Return all fields except *keywords* property",
                        "required": false,
                        "style": "form",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "_heatmapNoGeo",
                        "in": "query",
                        "description": "[EXTENSION][Heatmap] True to compute search result heatmap without taking account geographical filter",
                        "required": false,
                        "style": "form",
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Features collection",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestoFeatureCollection"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request (i.e. invalid parameter)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequestError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Collection not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api.{format}": {
            "get": {
                "tags": [
                    "Server"
                ],
                "summary": "OpenAPI definition",
                "description": "Returns the server API definition as an OpenAPI 3.0 JSON document (default) or as an HTML page (if format is specified and set to *html*)",
                "operationId": "ServicesAPI::api",
                "parameters": [
                    {
                        "name": "format",
                        "in": "path",
                        "description": "Output format - *json* or *html*",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "html"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OpenAPI 3.0 definition"
                    },
                    "404": {
                        "description": "Not found"
                    }
                }
            }
        },
        "/conformance": {
            "get": {
                "tags": [
                    "Server"
                ],
                "summary": "Conformance page",
                "description": "Returns the OGC API Feature conformance description as JSON document",
                "operationId": "ServicesAPI::conformance",
                "responses": {
                    "200": {
                        "description": "OGC API Feature conformance definition",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "conformsTo": {
                                            "description": "Array of conformance specification urls",
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found"
                    }
                }
            }
        },
        "/": {
            "get": {
                "tags": [
                    "Server"
                ],
                "summary": "Landing page",
                "description": "Landing page for the server. Should be used by client to automatically detects endpoints to API, collections, etc.",
                "operationId": "ServicesAPI::hello",
                "responses": {
                    "200": {
                        "description": "Server landing page",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "id": {
                                            "description": "Server identifier.",
                                            "type": "string"
                                        },
                                        "title": {
                                            "description": "Server title",
                                            "type": "string"
                                        },
                                        "description": {
                                            "description": "Server description",
                                            "type": "string"
                                        },
                                        "links": {
                                            "description": "Landing page conforms to OGC API Feature\n(see https://github.com/opengeospatial/ogcapi-features/blob/master/core/standard/17-069.adoc)",
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Link"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found"
                    }
                }
            }
        },
        "/_isLive": {
            "get": {
                "tags": [
                    "Status"
                ],
                "summary": "Liveness status",
                "description": "Returns HTTP 200 only if the service is live i.e. it cannot yet process requests.",
                "operationId": "StatusAPI::isLive",
                "responses": {
                    "200": {
                        "description": "Service is live",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "description": "Status is *success*",
                                            "type": "string"
                                        },
                                        "message": {
                                            "description": "Message information",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                },
                                "example": {
                                    "status": "success",
                                    "message": "Service is live"
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Not available"
                    }
                }
            }
        },
        "/users": {
            "get": {
                "tags": [
                    "User"
                ],
                "summary": "Get users",
                "description": "Return the list of user's profiles ordered by descending user identifier. A maximum of 50 profiles are returned per page. The *lt* parameter should be used for pagination",
                "operationId": "UsersAPI::getUsersProfiles",
                "parameters": [
                    {
                        "name": "lt",
                        "in": "query",
                        "description": "Return user profiles with identifier lower than *lt* - used for pagination",
                        "style": "form",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "in",
                        "in": "query",
                        "description": "List of comma separated user identifiers",
                        "style": "form",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "groupid",
                        "in": "query",
                        "description": "Return user profiles belonging to group identified by *groupid* ",
                        "style": "form",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Filter by name, firstname or lastname",
                        "style": "form",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of users profiles",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "totalResults": {
                                            "description": "Total number of user profiles",
                                            "type": "integer"
                                        },
                                        "exactCount": {
                                            "description": "True if totalResults is an exact count. False if estimated.",
                                            "type": "boolean"
                                        },
                                        "profiles": {
                                            "description": "Return users",
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/UserDisplayProfile"
                                            }
                                        }
                                    },
                                    "type": "object"
                                },
                                "example": {
                                    "totalResults": 2,
                                    "exactCount": true,
                                    "profiles": [
                                        {
                                            "id": "1356771884787565573",
                                            "username": "jrom",
                                            "picture": "https://robohash.org/d0e907f8b6f4ee74cd4c38a515e2a4de?gravatar=hashed&bgset=any&size=400x400",
                                            "groups": [
                                                1
                                            ],
                                            "followers": 185,
                                            "followings": 144,
                                            "firstname": "Jérôme",
                                            "lastname": "Gasperi",
                                            "bio": "Working on new features for the next major release of SnapPlanet",
                                            "registrationdate": "2016-10-08T22:50:34.187217Z",
                                            "topics": "earth,fires,geology,glaciology,volcanism",
                                            "followed": false,
                                            "followme": false
                                        },
                                        {
                                            "id": "1381434932013827205",
                                            "username": "Sergio",
                                            "picture": "https://graph.facebook.com/410860042635946/picture?type=large",
                                            "groups": [
                                                "1"
                                            ],
                                            "followers": 16,
                                            "followings": 9,
                                            "registrationdate": "2016-10-08T22:50:34.187217Z",
                                            "followed": false,
                                            "followme": false
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basicAuth": [],
                        "bearerAuth": [],
                        "queryAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "User"
                ],
                "summary": "Create user",
                "operationId": "UsersAPI::createUser",
                "requestBody": {
                    "description": "User information to create user account",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "username",
                                    "email",
                                    "password"
                                ],
                                "properties": {
                                    "email": {
                                        "description": "User email",
                                        "type": "string"
                                    },
                                    "password": {
                                        "description": "User password - don't worry it's encrypted server side",
                                        "type": "string"
                                    },
                                    "picture": {
                                        "description": "An http(s) url to the user's avatar picture",
                                        "type": "string"
                                    },
                                    "username": {
                                        "description": "User name - must be alphanumerical only between 3 and 255 characters. (Note: will be converted to lowercase)",
                                        "type": "string"
                                    },
                                    "firstname": {
                                        "description": "User firstname",
                                        "type": "string"
                                    },
                                    "lastname": {
                                        "description": "User lastname",
                                        "type": "string"
                                    },
                                    "bio": {
                                        "description": "User biography",
                                        "type": "string"
                                    },
                                    "country": {
                                        "description": "User country code (ISO 3166-1 alpha2 code)",
                                        "type": "string"
                                    },
                                    "organization": {
                                        "description": "Organization name",
                                        "type": "string"
                                    },
                                    "flags": {
                                        "description": "[Unused] Comma separated list of flags",
                                        "type": "string"
                                    },
                                    "topics": {
                                        "description": "Comma separated list of user's topics of interest",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            "example": {
                                "email": "john.doe@dev.null",
                                "password": "MySuperSecretPassword",
                                "picture": "https://robohash.org/d0e907f8b6f4ee74cd4c38a515e2a4de?gravatar=hashed&bgset=any&size=400x400",
                                "username": "jj",
                                "firstname": "John",
                                "lastname": "Doe",
                                "bio": "Just a user",
                                "country": "FR",
                                "organization": "My nice company",
                                "topics": "earth,fires,geology,glaciology,volcanism"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "User is created but not activated. An activation code is sent to user's email address.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "description": "Status is *success*",
                                            "type": "string"
                                        },
                                        "message": {
                                            "description": "Message information",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                },
                                "example": {
                                    "status": "success",
                                    "message": "User john.doe@dev.null created"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequestError"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "User already exist",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ConflictError"
                                }
                            }
                        }
                    },
                    "412": {
                        "description": "User already exist but is not activated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ConflictError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/me": {
            "get": {
                "tags": [
                    "User"
                ],
                "summary": "Get my profile",
                "operationId": "UsersAPI::getMyProfile",
                "responses": {
                    "200": {
                        "description": "User profile",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserDisplayProfile"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basicAuth": [],
                        "bearerAuth": [],
                        "queryAuth": []
                    }
                ]
            }
        },
        "/users/{username}": {
            "get": {
                "tags": [
                    "User"
                ],
                "summary": "Get user",
                "operationId": "UsersAPI::getUserProfile",
                "parameters": [
                    {
                        "name": "username",
                        "in": "path",
                        "description": "User name",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User profile",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserDisplayProfile"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basicAuth": [],
                        "bearerAuth": [],
                        "queryAuth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "User"
                ],
                "summary": "Update user",
                "operationId": "UsersAPI::updateUserProfile",
                "parameters": [
                    {
                        "name": "username",
                        "in": "path",
                        "description": "User's name",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "User information to update",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "password": {
                                        "description": "User password - don't worry it's encrypted server side",
                                        "type": "string"
                                    },
                                    "picture": {
                                        "description": "An http(s) url to the user's avatar picture",
                                        "type": "string"
                                    },
                                    "firstname": {
                                        "description": "User firstname",
                                        "type": "string"
                                    },
                                    "lastname": {
                                        "description": "User lastname",
                                        "type": "string"
                                    },
                                    "bio": {
                                        "description": "User biography",
                                        "type": "string"
                                    },
                                    "topics": {
                                        "description": "Comma separated list of user's topics of interest",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            "example": {
                                "picture": "https://robohash.org/d0e907f8b6f4ee74cd4c38a515e2a4de?gravatar=hashed&bgset=any&size=400x400",
                                "bio": "I just changed my picture, bio information and topics of interest list",
                                "topics": "earth,fires"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "User profile is updated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "description": "Status is *success*",
                                            "type": "string"
                                        },
                                        "message": {
                                            "description": "Message information",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                },
                                "example": {
                                    "status": "success",
                                    "message": "Update profile for user john.doe@dev.null"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequestError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basicAuth": [],
                        "bearerAuth": [],
                        "queryAuth": []
                    }
                ]
            }
        },
        "/users/{username}/catalogs": {
            "get": {
                "tags": [
                    "User"
                ],
                "summary": "Get user's catalogs",
                "operationId": "UsersAPI::getUserCatalogs",
                "parameters": [
                    {
                        "name": "username",
                        "in": "path",
                        "description": "User name",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User catalogs",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basicAuth": [],
                        "bearerAuth": [],
                        "queryAuth": []
                    }
                ]
            }
        },
        "/users/{username}/collections": {
            "get": {
                "tags": [
                    "User"
                ],
                "summary": "Get user's collections",
                "operationId": "UsersAPI::getUserCollections",
                "parameters": [
                    {
                        "name": "username",
                        "in": "path",
                        "description": "User name",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User collections",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basicAuth": [],
                        "bearerAuth": [],
                        "queryAuth": []
                    }
                ]
            }
        },
        "/users/{username}/features": {
            "get": {
                "tags": [
                    "User"
                ],
                "summary": "Get user's features",
                "operationId": "UsersAPI::getUserFeatures",
                "parameters": [
                    {
                        "name": "username",
                        "in": "path",
                        "description": "User name",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User features",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basicAuth": [],
                        "bearerAuth": [],
                        "queryAuth": []
                    }
                ]
            }
        }
    },
    "components": {
        "schemas": {
            "InputCollection": {
                "required": [
                    "id",
                    "description"
                ],
                "properties": {
                    "id": {
                        "description": "Collection identifier. It must be an unique alphanumeric string containing only [a-zA-Z0-9\\-_].",
                        "type": "string"
                    },
                    "title": {
                        "description": "A short descriptive one-line title for the Collection.",
                        "type": "string"
                    },
                    "description": {
                        "description": "Detailed multi-line description to fully explain the Collection. CommonMark 0.29 syntax MAY be used for rich text representation.",
                        "type": "string"
                    },
                    "aliases": {
                        "description": "Alias names for this collection. Each alias must be unique and not be the same as an already existing collection name",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "version": {
                        "description": "Version of the collection.",
                        "type": "string"
                    },
                    "visibility": {
                        "description": "Visibility for this collection as a list of group names. Only user from one of the group can see the collection."
                    },
                    "model": {
                        "description": "[For developper] Name of the collection model class under $SRC/include/resto/Models - Default is DefaultModel",
                        "type": "string"
                    },
                    "license": {
                        "description": "License for this collection as a SPDX License identifier. Alternatively, use other if the license is not on the SPDX license list. In these case link to the license texts SHOULD be added, see the license link relation type.",
                        "type": "string"
                    },
                    "links": {
                        "description": "resto collection",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Link"
                        }
                    },
                    "assets": {
                        "description": "resto collection",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Asset"
                        }
                    },
                    "keywords": {
                        "description": "List of keywords describing the collection.",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "providers": {
                        "description": "A list of providers, which may include all organizations capturing or processing the data or the hosting provider. Providers should be listed in chronological order with the most recent provider being the last element of the list",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Provider"
                        }
                    },
                    "properties": {
                        "description": "resto collection",
                        "type": "object"
                    },
                    "summaries": {
                        "description": "resto collection",
                        "type": "object"
                    }
                },
                "type": "object",
                "example": {
                    "id": "S2",
                    "type": "Collection",
                    "title": "Level 1C Sentinel-2 images",
                    "description": "The SENTINEL-2 mission is a land monitoring constellation of two satellites each equipped with a MSI (Multispectral Imager) instrument covering 13 spectral bands providing high resolution optical imagery (i.e., 10m, 20m, 60 m) every 10 days with one satellite and 5 days with two satellites",
                    "version": "1.0",
                    "model": "OpticalModel",
                    "visibility": [
                        "default"
                    ],
                    "license": "other",
                    "providers": [
                        {
                            "name": "European Union/ESA/Copernicus",
                            "roles": [
                                "producer",
                                "licensor"
                            ],
                            "url": "https://sentinel.esa.int/web/sentinel/user-guides/sentinel-2-msi"
                        }
                    ],
                    "links": [
                        {
                            "rel": "license",
                            "href": "https://scihub.copernicus.eu/twiki/pub/SciHubWebPortal/TermsConditions/Sentinel_Data_Terms_and_Conditions.pdf",
                            "title": "Legal notice on the use of Copernicus Sentinel Data and Service Information"
                        }
                    ],
                    "summaries": {
                        "bands": [
                            {
                                "name": "B1",
                                "common_name": "coastal",
                                "center_wavelength": 4.439,
                                "gsd": 60
                            },
                            {
                                "name": "B2",
                                "common_name": "blue",
                                "center_wavelength": 4.966,
                                "gsd": 10
                            },
                            {
                                "name": "B3",
                                "common_name": "green",
                                "center_wavelength": 5.6,
                                "gsd": 10
                            },
                            {
                                "name": "B4",
                                "common_name": "red",
                                "center_wavelength": 6.645,
                                "gsd": 10
                            },
                            {
                                "name": "B5",
                                "center_wavelength": 7.039,
                                "gsd": 20
                            },
                            {
                                "name": "B6",
                                "center_wavelength": 7.402,
                                "gsd": 20
                            },
                            {
                                "name": "B7",
                                "center_wavelength": 7.825,
                                "gsd": 20
                            },
                            {
                                "name": "B8",
                                "common_name": "nir",
                                "center_wavelength": 8.351,
                                "gsd": 10
                            },
                            {
                                "name": "B8A",
                                "center_wavelength": 8.648,
                                "gsd": 20
                            },
                            {
                                "name": "B9",
                                "center_wavelength": 9.45,
                                "gsd": 60
                            },
                            {
                                "name": "B10",
                                "center_wavelength": 1.3735,
                                "gsd": 60
                            },
                            {
                                "name": "B11",
                                "common_name": "swir16",
                                "center_wavelength": 1.6137,
                                "gsd": 20
                            },
                            {
                                "name": "B12",
                                "common_name": "swir22",
                                "center_wavelength": 2.2024,
                                "gsd": 20
                            }
                        ]
                    }
                }
            },
            "OutputCollection": {
                "required": [
                    "id",
                    "type",
                    "description",
                    "license",
                    "extent",
                    "links"
                ],
                "properties": {
                    "id": {
                        "description": "Collection identifier. It must be an unique alphanumeric string containing only [a-zA-Z0-9\\-_].",
                        "type": "string"
                    },
                    "type": {
                        "description": "[EXTENSION][STAC] Always set to *Collection*",
                        "type": "string",
                        "enum": [
                            "Collection"
                        ]
                    },
                    "title": {
                        "description": "A short descriptive one-line title for the collection.",
                        "type": "string"
                    },
                    "description": {
                        "description": "Detailed multi-line description to fully explain the collection. CommonMark 0.28 syntax MAY be used for rich text representation.",
                        "type": "string"
                    },
                    "keywords": {
                        "description": "List of keywords describing the collection.",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "aliases": {
                        "description": "Alias names for this collection. Each alias must be unique and not be the same as an already existing collection name",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "license": {
                        "description": "License for this collection as a SPDX License identifier or expression. Alternatively, use other if the license is not on the SPDX license list. In this case, links to the license texts SHOULD be added, see the license link relation type.",
                        "type": "string",
                        "enum": [
                            "other",
                            "<license id>"
                        ]
                    },
                    "extent": {
                        "type": "object",
                        "$ref": "#/components/schemas/Extent"
                    },
                    "links": {
                        "description": "resto collection",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Link"
                        }
                    },
                    "resto:info": {
                        "description": "resto additional information",
                        "type": "object"
                    },
                    "providers": {
                        "description": "A list of providers, which may include all organizations capturing or processing the data or the hosting provider. Providers should be listed in chronological order with the most recent provider being the last element of the list",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Provider"
                        }
                    },
                    "properties": {
                        "description": "Free properties object",
                        "type": "object"
                    },
                    "summaries": {
                        "description": "resto collection",
                        "type": "object"
                    },
                    "stac_version": {
                        "description": "[EXTENSION][STAC] The STAC version the Collection implements",
                        "type": "string"
                    },
                    "stac_extensions": {
                        "description": "[EXTENSION][STAC] A list of extensions the Collection implements.",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "type": "object",
                "example": {
                    "id": "S2",
                    "title": "Sentinel-2",
                    "description": "The SENTINEL-2 mission is a land monitoring constellation of two satellites each equipped with a MSI (Multispectral Imager) instrument covering 13 spectral bands providing high resolution optical imagery (i.e., 10m, 20m, 60 m) every 10 days with one satellite and 5 days with two satellites",
                    "keywords": [
                        "copernicus",
                        "esa",
                        "eu",
                        "msi",
                        "radiance",
                        "sentinel",
                        "sentinel2"
                    ],
                    "license": "other",
                    "extent": {
                        "spatial": {
                            "bbox": [
                                [
                                    -48.6198530870596,
                                    74.6749788966259,
                                    -44.6464244356188,
                                    75.6843970710939
                                ]
                            ],
                            "crs": "http://www.opengis.net/def/crs/OGC/1.3/CRS84"
                        },
                        "temporal": {
                            "interval": [
                                [
                                    "2019-06-11T16:11:41.808000Z",
                                    "2019-06-11T16:11:41.808000Z"
                                ]
                            ],
                            "trs": "http://www.opengis.net/def/uom/ISO-8601/0/Gregorian"
                        }
                    },
                    "links": [
                        {
                            "rel": "self",
                            "type": "application/json",
                            "href": "http://127.0.0.1:5252/collections/S2.json?&_pretty=1"
                        },
                        {
                            "rel": "root",
                            "type": "application/json",
                            "href": "http://127.0.0.1:5252"
                        },
                        {
                            "rel": "license",
                            "href": "https://scihub.copernicus.eu/twiki/pub/SciHubWebPortal/TermsConditions/Sentinel_Data_Terms_and_Conditions.pdf",
                            "title": "Legal notice on the use of Copernicus Sentinel Data and Service Information"
                        }
                    ],
                    "resto:info": {
                        "model": "OpticalModel",
                        "lineage": [
                            "DefaultModel",
                            "LandCoverModel",
                            "SatelliteModel",
                            "OpticalModel"
                        ],
                        "owner": "203883411255198721"
                    },
                    "providers": [
                        {
                            "name": "European Union/ESA/Copernicus",
                            "roles": [
                                "producer",
                                "licensor"
                            ],
                            "url": "https://sentinel.esa.int/web/sentinel/user-guides/sentinel-2-msi"
                        }
                    ],
                    "summaries": {
                        "datetime": {
                            "minimum": "2019-06-11T16:11:41.808000Z",
                            "maximum": "2019-06-11T16:11:41.808000Z"
                        },
                        "eo:instrument": [
                            "MSI"
                        ],
                        "eo:platform": [
                            "S2A"
                        ],
                        "processingLevel": [
                            "LEVEL1C"
                        ],
                        "productType": [
                            "REFLECTANCE"
                        ],
                        "bands": [
                            {
                                "name": "B1",
                                "common_name": "coastal",
                                "center_wavelength": 4.439,
                                "gsd": 60
                            },
                            {
                                "name": "B2",
                                "common_name": "blue",
                                "center_wavelength": 4.966,
                                "gsd": 10
                            },
                            {
                                "name": "B3",
                                "common_name": "green",
                                "center_wavelength": 5.6,
                                "gsd": 10
                            },
                            {
                                "name": "B4",
                                "common_name": "red",
                                "center_wavelength": 6.645,
                                "gsd": 10
                            },
                            {
                                "name": "B5",
                                "center_wavelength": 7.039,
                                "gsd": 20
                            },
                            {
                                "name": "B6",
                                "center_wavelength": 7.402,
                                "gsd": 20
                            },
                            {
                                "name": "B7",
                                "center_wavelength": 7.825,
                                "gsd": 20
                            },
                            {
                                "name": "B8",
                                "common_name": "nir",
                                "center_wavelength": 8.351,
                                "gsd": 10
                            },
                            {
                                "name": "B8A",
                                "center_wavelength": 8.648,
                                "gsd": 20
                            },
                            {
                                "name": "B9",
                                "center_wavelength": 9.45,
                                "gsd": 60
                            },
                            {
                                "name": "B10",
                                "center_wavelength": 1.3735,
                                "gsd": 60
                            },
                            {
                                "name": "B11",
                                "common_name": "swir16",
                                "center_wavelength": 1.6137,
                                "gsd": 20
                            },
                            {
                                "name": "B12",
                                "common_name": "swir22",
                                "center_wavelength": 2.2024,
                                "gsd": 20
                            }
                        ]
                    },
                    "stac_version": "1.0.0",
                    "stac_extensions": [
                        "https://stac-extensions.github.io/eo/v1.0.0/schema.json"
                    ]
                }
            },
            "Provider": {
                "description": "A provider is any of the organizations that captured or processed the content of the collection and therefore influenced the data offered by this collection",
                "required": [
                    "name"
                ],
                "properties": {
                    "name": {
                        "description": "The name of the organization or the individual",
                        "type": "string"
                    },
                    "description": {
                        "description": "Multi-line description to add further provider information such as processing details for processors and producers, hosting details for hosts or basic contact information. CommonMark 0.28 syntax MAY be used for rich text representation",
                        "type": "string"
                    },
                    "roles": {
                        "description": "Roles of the provider.",
                        "type": "array",
                        "items": {
                            "type": "string",
                            "enum": [
                                "licensor",
                                "producer",
                                "processor",
                                "host"
                            ]
                        }
                    },
                    "url": {
                        "description": "Homepage on which the provider describes the dataset and publishes contact information.",
                        "type": "string"
                    }
                },
                "type": "object",
                "example": [
                    {
                        "name": "European Union/ESA/Copernicus",
                        "roles": [
                            "producer",
                            "licensor"
                        ],
                        "url": "https://sentinel.esa.int/web/sentinel/user-guides/sentinel-2-msi"
                    }
                ]
            },
            "Extent": {
                "description": "Spatio-temporal extents of the Collection",
                "required": [
                    "spatial",
                    "temporal"
                ],
                "properties": {
                    "spatial": {
                        "description": "The spatial extents of the Collection",
                        "type": "object"
                    },
                    "temporal": {
                        "description": "The temporal extents of the Collection",
                        "type": "object"
                    }
                },
                "type": "object",
                "example": {
                    "spatial": {
                        "bbox": [
                            [
                                -48.6198530870596,
                                74.6749788966259,
                                -44.6464244356188,
                                75.6843970710939
                            ]
                        ],
                        "crs": "http://www.opengis.net/def/crs/OGC/1.3/CRS84"
                    },
                    "temporal": {
                        "interval": [
                            [
                                "2019-06-11T16:11:41.808000Z",
                                "2019-06-11T16:11:41.808000Z"
                            ]
                        ],
                        "trs": "http://www.opengis.net/def/uom/ISO-8601/0/Gregorian"
                    }
                }
            },
            "OutputFeature": {
                "description": "Feature returned by resto",
                "required": [
                    "type",
                    "id",
                    "geometry",
                    "properties",
                    "collection",
                    "links",
                    "assets"
                ],
                "properties": {
                    "type": {
                        "description": "Always set to *feature*",
                        "type": "string",
                        "enum": [
                            "Feature"
                        ]
                    },
                    "id": {
                        "description": "Feature identifier",
                        "type": "string"
                    },
                    "geometry": {
                        "description": "Geometry definition",
                        "required": [
                            "type",
                            "geometry"
                        ],
                        "properties": {
                            "type": {
                                "description": "Geometry type following GeoJSON specification",
                                "type": "string",
                                "enum": [
                                    "Point",
                                    "MultiPoint",
                                    "LineString",
                                    "MultiLineString",
                                    "Polygon",
                                    "MultiPolygon",
                                    "GeometryCollection"
                                ]
                            },
                            "coordinates": {
                                "description": "Geometry vertices following GeoJSON specification",
                                "type": "array",
                                "items": {
                                    "type": "number"
                                }
                            }
                        },
                        "type": "object"
                    },
                    "collection": {
                        "description": "Collection identifier",
                        "type": "string"
                    },
                    "links": {
                        "description": "RESTo Feature",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Link"
                        }
                    },
                    "assets": {
                        "description": "RESTo Feature",
                        "type": "object"
                    },
                    "properties": {
                        "description": "Feature properties mainly based on *[OGC-13-026r8] OGC OpenSearch Extension for Earth Observation*. Only non null properties are returned",
                        "properties": {
                            "title": {
                                "description": "A name given to the feature",
                                "type": "string"
                            },
                            "description": {
                                "description": "A descriptipon of the feature",
                                "type": "string"
                            },
                            "datetime": {
                                "description": "Start/end of feature life (e.g. start of acquisition for a satellite imagery) (ISO 8601 - YYYY-MM-DD-THH:MM:SSZ/YYYY-MM-DD-THH:MM:SSZ)",
                                "type": "string"
                            },
                            "udpated": {
                                "description": "The date when the feature metadata was updated (ISO 8601 - YYYY-MM-DD-THH:MM:SSZ)",
                                "type": "string"
                            },
                            "created": {
                                "description": "The date when the feature metadata was created (ISO 8601 - YYYY-MM-DD-THH:MM:SSZ)",
                                "type": "string"
                            },
                            "resto:catalogs": {
                                "description": "Array of catalogs attached to the feature",
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "centroid": {
                                "description": "Centroid of the feature",
                                "properties": {
                                    "type": {
                                        "description": "Always set to *Point*",
                                        "type": "string"
                                    },
                                    "coordinates": {
                                        "description": "Coordinates expressed in [longitude, latitude]",
                                        "type": "array",
                                        "items": {
                                            "type": "number"
                                        }
                                    }
                                },
                                "type": "object"
                            },
                            "likes": {
                                "description": "Number of likes for this feature",
                                "type": "integer"
                            },
                            "comments": {
                                "description": "Number of comments on this feature",
                                "type": "integer"
                            },
                            "owner": {
                                "description": "Owner of the feature (i.e. resto user identifier as bigint)",
                                "type": "string"
                            },
                            "status": {
                                "description": "[Unused]",
                                "type": "integer"
                            },
                            "liked": {
                                "description": "True if the user that requests the feature likes it",
                                "type": "boolean"
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object",
                "example": {
                    "type": "Feature",
                    "id": "b9eeaf68-5127-53e5-97ff-ddf44984ef56",
                    "geometry": {
                        "type": "Polygon",
                        "coordinates": [
                            [
                                [
                                    -16.34433,
                                    -36.136821
                                ],
                                [
                                    -16.002576,
                                    -36.14017
                                ],
                                [
                                    -16.003437,
                                    -36.207726
                                ],
                                [
                                    -16.003437,
                                    -36.207726
                                ],
                                [
                                    -16.073904,
                                    -36.193064
                                ],
                                [
                                    -16.079613,
                                    -36.194838
                                ],
                                [
                                    -16.343729,
                                    -36.140707
                                ],
                                [
                                    -16.343453,
                                    -36.137129
                                ],
                                [
                                    -16.34433,
                                    -36.136821
                                ]
                            ]
                        ]
                    },
                    "collection": "S2",
                    "properties": {
                        "datetime": "2020-06-21T11:11:28.371000Z",
                        "start_datetime": "2020-06-21T11:11:28.371000Z",
                        "end_datetime": "2020-06-21T11:11:28.371000Z",
                        "productIdentifier": "S2B_MSIL1C_20200621T111039_N0209_R008_T28HCE_20200621T132349",
                        "updated": "2018-09-13T12:52:25.971969Z",
                        "created": "2018-09-13T12:52:25.971969Z",
                        "resto:catalogs": [
                            "ocean/SouthAtlanticOcean",
                            "landcover/water",
                            "location/southern",
                            "season/winter",
                            "productTypes/REFLECTANCE",
                            "processingLevelsLEVEL1C",
                            "platforms/S2B",
                            "instruments/MSI",
                            "years/2020",
                            "months/06",
                            "days/21"
                        ],
                        "centroid": {
                            "type": "Point",
                            "coordinates": [
                                70.513407,
                                23.006623
                            ]
                        },
                        "likes": 0,
                        "comments": 0,
                        "liked": false
                    },
                    "links": [
                        {
                            "rel": "self",
                            "type": "application/geo+json",
                            "href": "https://tamn.snapplanet.io/collections/S2/items/af9f811b-f6b7-5dfc-ac43-c1d200a79088"
                        }
                    ],
                    "assets": {
                        "thumbnail": {
                            "href": "https://roda.sentinel-hub.com/sentinel-s2-l1c/tiles/28/H/CE/2020/6/21/0/preview.jpg",
                            "type": "image/jpeg",
                            "role": "thumbnail"
                        }
                    }
                }
            },
            "InputFeature": {
                "description": "Feature ingested by resto",
                "required": [
                    "type",
                    "geometry",
                    "properties"
                ],
                "properties": {
                    "type": {
                        "description": "Always set to *feature*",
                        "type": "string",
                        "enum": [
                            "Feature"
                        ]
                    },
                    "id": {
                        "description": "Feature identifier",
                        "type": "string"
                    },
                    "geometry": {
                        "description": "Geometry definition",
                        "required": [
                            "type",
                            "geometry"
                        ],
                        "properties": {
                            "type": {
                                "description": "Geometry type following GeoJSON specification",
                                "type": "string",
                                "enum": [
                                    "Point",
                                    "MultiPoint",
                                    "LineString",
                                    "MultiLineString",
                                    "Polygon",
                                    "MultiPolygon",
                                    "GeometryCollection"
                                ]
                            },
                            "coordinates": {
                                "description": "Geometry vertices following GeoJSON specification",
                                "type": "array",
                                "items": {
                                    "type": "number"
                                }
                            }
                        },
                        "type": "object"
                    },
                    "properties": {
                        "description": "Feature properties mainly based on *[OGC-13-026r8] OGC OpenSearch Extension for Earth Observation*. Only non null properties are returned",
                        "properties": {
                            "title": {
                                "description": "A name given to the feature",
                                "type": "string"
                            },
                            "description": {
                                "description": "Descritipon of the feature. Each hashtag within the description is indexed to speedup search",
                                "type": "string"
                            },
                            "productIdentifier": {
                                "description": "Original product identifier",
                                "type": "string"
                            },
                            "datetime": {
                                "description": "Start/end of feature life (e.g. start of acquisition for a satellite imagery) (ISO 8601 - YYYY-MM-DD-THH:MM:SSZ/YYYY-MM-DD-THH:MM:SSZ)",
                                "type": "string"
                            },
                            "status": {
                                "description": "[Unused]",
                                "type": "integer"
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object",
                "example": {
                    "type": "Feature",
                    "geometry": {
                        "type": "Polygon",
                        "coordinates": [
                            [
                                [
                                    -16.34433,
                                    -36.136821
                                ],
                                [
                                    -16.002576,
                                    -36.14017
                                ],
                                [
                                    -16.003437,
                                    -36.207726
                                ],
                                [
                                    -16.003437,
                                    -36.207726
                                ],
                                [
                                    -16.073904,
                                    -36.193064
                                ],
                                [
                                    -16.079613,
                                    -36.194838
                                ],
                                [
                                    -16.343729,
                                    -36.140707
                                ],
                                [
                                    -16.343453,
                                    -36.137129
                                ],
                                [
                                    -16.34433,
                                    -36.136821
                                ]
                            ]
                        ]
                    },
                    "properties": {
                        "productIdentifier": "S2B_MSIL1C_20200621T111039_N0209_R008_T28HCE_20200621T132349",
                        "datetime": "2020-06-21T11:11:28.371000Z"
                    }
                }
            },
            "RestoFeatureCollection": {
                "description": "Feature collection",
                "required": [
                    "type",
                    "links",
                    "features",
                    "context"
                ],
                "properties": {
                    "type": {
                        "description": "Always set to *FeatureCollection*",
                        "type": "string",
                        "enum": [
                            "FeatureCollection"
                        ]
                    },
                    "features": {
                        "description": "Array of features",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/OutputFeature"
                        }
                    },
                    "links": {
                        "description": "RESTo FeatureCollection",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Link"
                        }
                    },
                    "context": {
                        "description": "Information on search query",
                        "required": [
                            "returned"
                        ],
                        "items": {
                            "properties": {
                                "returned": {
                                    "description": "The count of results returned by this response. equal to the cardinality of features array",
                                    "type": "integer"
                                },
                                "limit": {
                                    "description": "The maximum number of results to which the result was limited",
                                    "type": "integer"
                                },
                                "matched": {
                                    "description": "The count of total number of results that match for this query, possibly estimated",
                                    "type": "integer"
                                },
                                "exactCount": {
                                    "description": "True if *matched* is exact - false means that it is estimated",
                                    "type": "boolean"
                                },
                                "startIndex": {
                                    "description": "Start index for the search (cf. pagination)",
                                    "type": "integer"
                                },
                                "query": {
                                    "description": "Query details",
                                    "type": "object"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "id": {
                        "description": "FeatureCollection unique identifier (uuid)",
                        "type": "string"
                    }
                },
                "type": "object",
                "example": {
                    "type": "FeatureCollection",
                    "features": [
                        {
                            "stac_version": "1.0.0",
                            "stac_extensions": [
                                "https://stac-extensions.github.io/eo/v1.0.0/schema.json"
                            ],
                            "type": "Feature",
                            "id": "8030a391-4002-556f-929b-d7ff9dad6705",
                            "bbox": [
                                -48.6198530870596,
                                74.6749788966259,
                                -44.6464244356188,
                                75.6843970710939
                            ],
                            "geometry": {
                                "type": "Polygon",
                                "coordinates": [
                                    [
                                        [
                                            -48.619853,
                                            75.657209
                                        ],
                                        [
                                            -44.646424,
                                            75.684397
                                        ],
                                        [
                                            -44.660672,
                                            75.069386
                                        ],
                                        [
                                            -44.698432,
                                            75.060518
                                        ],
                                        [
                                            -45.489771,
                                            74.830977
                                        ],
                                        [
                                            -45.857954,
                                            74.720238
                                        ],
                                        [
                                            -45.921685,
                                            74.698702
                                        ],
                                        [
                                            -48.392706,
                                            74.674979
                                        ],
                                        [
                                            -48.619853,
                                            75.657209
                                        ]
                                    ]
                                ]
                            },
                            "properties": {
                                "datetime": "2019-06-11T16:11:41Z",
                                "productIdentifier": "S2A_MSIL1C_20190611T160901_N0207_R140_T23XMD_20190611T193040",
                                "startDate": "2019-06-11T16:11:41.808000Z"
                            },
                            "collection": "S2",
                            "links": [
                                {
                                    "rel": "self",
                                    "type": "application/json",
                                    "href": "http://127.0.0.1:5252/collections/S2/items/8030a391-4002-556f-929b-d7ff9dad6705?&lang=en"
                                },
                                {
                                    "rel": "collection",
                                    "type": "application/json",
                                    "title": "S2",
                                    "href": "http://127.0.0.1:5252/collections/S2?&lang=en"
                                }
                            ],
                            "assets": {
                                "thumbnail": {
                                    "href": "https://roda.sentinel-hub.com/sentinel-s2-l1c/tiles/23/X/MD/2019/6/11/0/preview.jpg",
                                    "type": "image/jpeg"
                                },
                                "metadata": {
                                    "href": "https://roda.sentinel-hub.com/sentinel-s2-l1c/tiles/23/X/MD/2019/6/11/0/metadata.xml",
                                    "type": "text/xml"
                                },
                                "tileInfo": {
                                    "href": "https://roda.sentinel-hub.com/sentinel-s2-l1c/tiles/23/X/MD/2019/6/11/0/tileInfo.json",
                                    "type": "application/json"
                                },
                                "productInfo": {
                                    "href": "https://roda.sentinel-hub.com/sentinel-s2-l1c/tiles/23/X/MD/2019/6/11/0/productInfo.json",
                                    "type": "application/json"
                                }
                            }
                        }
                    ],
                    "links": [
                        {
                            "rel": "self",
                            "type": "application/json",
                            "href": "http://127.0.0.1:5252/stac/search.json?"
                        },
                        {
                            "rel": "next",
                            "type": "application/json",
                            "href": "http://127.0.0.1:5252/stac/search.json?next=204449069316703379"
                        }
                    ],
                    "context": {
                        "returned": 20,
                        "limit": 20,
                        "matched": 11345,
                        "exactCount": false,
                        "startIndex": 1,
                        "query": {
                            "inputFilters": []
                        }
                    },
                    "id": "20ac2fc6-daee-5621-bca4-d88c0bb19da1"
                }
            },
            "InputFeatureCollection": {
                "description": "Feature collection",
                "required": [
                    "type",
                    "features"
                ],
                "properties": {
                    "type": {
                        "description": "Always set to *FeatureCollection*",
                        "type": "string",
                        "enum": [
                            "FeatureCollection"
                        ]
                    },
                    "features": {
                        "description": "Array of features",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/InputFeature"
                        }
                    }
                },
                "type": "object",
                "example": {
                    "type": "FeatureCollection",
                    "features": [
                        {
                            "stac_version": "1.0.0",
                            "stac_extensions": [
                                "https://stac-extensions.github.io/eo/v1.0.0/schema.json"
                            ],
                            "type": "Feature",
                            "id": "8030a391-4002-556f-929b-d7ff9dad6705",
                            "bbox": [
                                -48.6198530870596,
                                74.6749788966259,
                                -44.6464244356188,
                                75.6843970710939
                            ],
                            "geometry": {
                                "type": "Polygon",
                                "coordinates": [
                                    [
                                        [
                                            -48.619853,
                                            75.657209
                                        ],
                                        [
                                            -44.646424,
                                            75.684397
                                        ],
                                        [
                                            -44.660672,
                                            75.069386
                                        ],
                                        [
                                            -44.698432,
                                            75.060518
                                        ],
                                        [
                                            -45.489771,
                                            74.830977
                                        ],
                                        [
                                            -45.857954,
                                            74.720238
                                        ],
                                        [
                                            -45.921685,
                                            74.698702
                                        ],
                                        [
                                            -48.392706,
                                            74.674979
                                        ],
                                        [
                                            -48.619853,
                                            75.657209
                                        ]
                                    ]
                                ]
                            },
                            "properties": {
                                "datetime": "2019-06-11T16:11:41Z",
                                "productIdentifier": "S2A_MSIL1C_20190611T160901_N0207_R140_T23XMD_20190611T193040",
                                "startDate": "2019-06-11T16:11:41.808000Z"
                            },
                            "collection": "S2",
                            "links": [
                                {
                                    "rel": "self",
                                    "type": "application/json",
                                    "href": "http://127.0.0.1:5252/collections/S2/items/8030a391-4002-556f-929b-d7ff9dad6705?&lang=en"
                                },
                                {
                                    "rel": "collection",
                                    "type": "application/json",
                                    "title": "S2",
                                    "href": "http://127.0.0.1:5252/collections/S2?&lang=en"
                                }
                            ],
                            "assets": {
                                "thumbnail": {
                                    "href": "https://roda.sentinel-hub.com/sentinel-s2-l1c/tiles/23/X/MD/2019/6/11/0/preview.jpg",
                                    "type": "image/jpeg"
                                },
                                "metadata": {
                                    "href": "https://roda.sentinel-hub.com/sentinel-s2-l1c/tiles/23/X/MD/2019/6/11/0/metadata.xml",
                                    "type": "text/xml"
                                },
                                "tileInfo": {
                                    "href": "https://roda.sentinel-hub.com/sentinel-s2-l1c/tiles/23/X/MD/2019/6/11/0/tileInfo.json",
                                    "type": "application/json"
                                },
                                "productInfo": {
                                    "href": "https://roda.sentinel-hub.com/sentinel-s2-l1c/tiles/23/X/MD/2019/6/11/0/productInfo.json",
                                    "type": "application/json"
                                }
                            }
                        }
                    ]
                }
            },
            "UserDisplayProfile": {
                "required": [
                    "id",
                    "picture",
                    "groups",
                    "username",
                    "followers",
                    "followings"
                ],
                "properties": {
                    "id": {
                        "description": "Unique user identifier. Identifier is related to user's registration date i.e. the greatest the identifier value, the most recently registered the user is",
                        "type": "string"
                    },
                    "picture": {
                        "description": "An http(s) url to the user's avatar picture",
                        "type": "string"
                    },
                    "groups": {
                        "description": "Array of group identifiers",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "username": {
                        "description": "User name",
                        "type": "string"
                    },
                    "followers": {
                        "description": "Number of user's followers",
                        "type": "integer"
                    },
                    "followings": {
                        "description": "Number of user's followings",
                        "type": "integer"
                    },
                    "firstname": {
                        "description": "User firstname",
                        "type": "string"
                    },
                    "lastname": {
                        "description": "User lastname",
                        "type": "string"
                    },
                    "bio": {
                        "description": "User biography",
                        "type": "string"
                    },
                    "registrationdate": {
                        "description": "User registration date",
                        "type": "string"
                    },
                    "topics": {
                        "description": "Comma separated list of user's topics of interest",
                        "type": "string"
                    },
                    "followed": {
                        "description": "True if user is followed by requesting user",
                        "type": "boolean"
                    },
                    "followme": {
                        "description": "True if user follows requesting user",
                        "type": "string"
                    }
                },
                "type": "object",
                "example": {
                    "id": "1356771884787565573",
                    "picture": "https://robohash.org/d0e907f8b6f4ee74cd4c38a515e2a4de?gravatar=hashed&bgset=any&size=400x400",
                    "groups": [
                        "1"
                    ],
                    "username": "jrom",
                    "followers": 185,
                    "followings": 144,
                    "firstname": "Jérôme",
                    "lastname": "Gasperi",
                    "bio": "Working on new features for the next major release of SnapPlanet",
                    "registrationdate": "2016-10-08T22:50:34.187217Z",
                    "topics": "earth,fires,geology,glaciology,volcanism",
                    "followed": false,
                    "followme": false
                }
            },
            "OutputGroup": {
                "required": [
                    "id",
                    "name",
                    "description",
                    "owner"
                ],
                "properties": {
                    "id": {
                        "description": "Unique group identifier - generated by resto during group creation",
                        "type": "string"
                    },
                    "name": {
                        "description": "Unique name of the group - free text",
                        "type": "string"
                    },
                    "description": {
                        "description": "A description for this group",
                        "type": "string"
                    },
                    "owner": {
                        "description": "Owner of the group (i.e. resto username)",
                        "type": "integer"
                    },
                    "created": {
                        "description": "Date of group creation (ISO 8601 - YYYY-MM-DD-THH:MM:SSZ)",
                        "type": "string"
                    }
                },
                "type": "object",
                "example": {
                    "name": "My first group",
                    "description": "Any user can create a group.",
                    "id": "100",
                    "owner": "johndoe",
                    "created": "2024-12-13T21:29:23.671111Z",
                    "members": [
                        "johndoe"
                    ]
                }
            },
            "Rights": {
                "description": "A list of boolean rights",
                "type": "object",
                "example": {
                    "createCollection": false,
                    "deleteCollection": true,
                    "updateCollection": true,
                    "deleteAnyCollection": false,
                    "updateAnyCollection": false,
                    "createItem": true,
                    "updateItem": true,
                    "deleteItem": true,
                    "createAnyItem": false,
                    "deleteAnyItem": false,
                    "updateAnyItem": false,
                    "downloadItem": false
                }
            },
            "Catalog": {
                "required": [
                    "id",
                    "description",
                    "links",
                    "stac_version"
                ],
                "properties": {
                    "id": {
                        "description": "Identifier for the catalog.",
                        "type": "string"
                    },
                    "title": {
                        "description": "A short descriptive one-line title for the catalog.",
                        "type": "string"
                    },
                    "description": {
                        "description": "Detailed multi-line description to fully explain the catalog. CommonMark 0.28 syntax MAY be used for rich text representation.",
                        "type": "string"
                    },
                    "links": {
                        "description": "STAC add-on",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Link"
                        }
                    },
                    "stac_version": {
                        "description": "The STAC version the catalog implements",
                        "type": "string"
                    }
                },
                "type": "object",
                "example": {
                    "id": "year",
                    "title": "Facet : year",
                    "description": "Catalog of items filtered by year",
                    "links": [
                        {
                            "rel": "self",
                            "type": "application/json",
                            "href": "http://127.0.0.1:5252/collections/S2.json?&_pretty=1"
                        },
                        {
                            "rel": "root",
                            "type": "application/json",
                            "href": "http://127.0.0.1:5252"
                        },
                        {
                            "rel": "license",
                            "href": "https://scihub.copernicus.eu/twiki/pub/SciHubWebPortal/TermsConditions/Sentinel_Data_Terms_and_Conditions.pdf",
                            "title": "Legal notice on the use of Copernicus Sentinel Data and Service Information"
                        }
                    ],
                    "stac_version": "1.0.0"
                }
            },
            "Queryables": {
                "properties": {
                    "$schema": {
                        "description": "STAC add-on",
                        "type": "string"
                    },
                    "$id": {
                        "description": "STAC add-on",
                        "type": "string"
                    },
                    "type": {
                        "description": "STAC add-on",
                        "type": "string"
                    },
                    "title": {
                        "description": "STAC add-on",
                        "type": "string"
                    },
                    "description": {
                        "description": "STAC add-on",
                        "type": "string"
                    },
                    "properties": {
                        "description": "STAC add-on",
                        "type": "object"
                    },
                    "additionalProperties": {
                        "description": "STAC add-on",
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "Link": {
                "description": "Link",
                "required": [
                    "rel",
                    "href"
                ],
                "properties": {
                    "rel": {
                        "description": "Relationship between the feature and the linked document/resource",
                        "type": "string"
                    },
                    "type": {
                        "description": "Mimetype of the resource",
                        "type": "string"
                    },
                    "title": {
                        "description": "Title of the resource",
                        "type": "string"
                    },
                    "href": {
                        "description": "Url to the resource",
                        "type": "string"
                    }
                },
                "type": "object",
                "example": {
                    "rel": "self",
                    "type": "application/json",
                    "href": "http://127.0.0.1:5252/collections/S2.json?&_pretty=1"
                }
            },
            "Asset": {
                "description": "Asset links",
                "required": [
                    "rel",
                    "href"
                ],
                "properties": {
                    "rel": {
                        "description": "Relationship between the feature and the linked document/resource",
                        "type": "string"
                    },
                    "type": {
                        "description": "Mimetype of the resource",
                        "type": "string"
                    },
                    "title": {
                        "description": "Title of the resource",
                        "type": "string"
                    },
                    "href": {
                        "description": "Url to the resource",
                        "type": "string"
                    },
                    "roles": {
                        "description": "Asset roles",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "type": "object",
                "example": {
                    "href": "https://landsat-pds.s3.amazonaws.com/c1/L8/171/002/LC08_L1TP_171002_20200616_20200616_01_RT/LC08_L1TP_171002_20200616_20200616_01_RT_B1.TIF",
                    "type": "image/tiff; application=geotiff; profile=cloud-optimized",
                    "roles": [
                        "data"
                    ],
                    "bands": [
                        0
                    ]
                }
            },
            "GenericError": {
                "required": [
                    "ErrorCode",
                    "ErrorMessage"
                ],
                "properties": {
                    "ErrorCode": {
                        "description": "HTTP status code",
                        "type": "integer"
                    },
                    "ErrorMessage": {
                        "description": "Error message",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "ConflictError": {
                "required": [
                    "ErrorCode",
                    "ErrorMessage"
                ],
                "properties": {
                    "ErrorCode": {
                        "description": "HTTP status code",
                        "type": "integer"
                    },
                    "ErrorMessage": {
                        "description": "Error message",
                        "type": "string"
                    }
                },
                "type": "object",
                "example": {
                    "ErrorCode": 409,
                    "ErrorMessage": "Conflict"
                }
            },
            "ForbiddenError": {
                "required": [
                    "ErrorCode",
                    "ErrorMessage"
                ],
                "properties": {
                    "ErrorCode": {
                        "description": "HTTP status code",
                        "type": "integer"
                    },
                    "ErrorMessage": {
                        "description": "Error message",
                        "type": "string"
                    }
                },
                "type": "object",
                "example": {
                    "ErrorCode": 403,
                    "ErrorMessage": "Forbidden"
                }
            },
            "UnauthorizedError": {
                "required": [
                    "ErrorCode",
                    "ErrorMessage"
                ],
                "properties": {
                    "ErrorCode": {
                        "description": "HTTP status code",
                        "type": "integer"
                    },
                    "ErrorMessage": {
                        "description": "Error message",
                        "type": "string"
                    }
                },
                "type": "object",
                "example": {
                    "ErrorCode": 401,
                    "ErrorMessage": "Unauthorized"
                }
            },
            "BadRequestError": {
                "required": [
                    "ErrorCode",
                    "ErrorMessage"
                ],
                "properties": {
                    "ErrorCode": {
                        "description": "HTTP status code",
                        "type": "integer"
                    },
                    "ErrorMessage": {
                        "description": "Error message",
                        "type": "string"
                    }
                },
                "type": "object",
                "example": {
                    "ErrorCode": 400,
                    "ErrorMessage": "Bad request"
                }
            },
            "NotFoundError": {
                "required": [
                    "ErrorCode",
                    "ErrorMessage"
                ],
                "properties": {
                    "ErrorCode": {
                        "description": "HTTP status code",
                        "type": "integer"
                    },
                    "ErrorMessage": {
                        "description": "Error message",
                        "type": "string"
                    }
                },
                "type": "object",
                "example": {
                    "ErrorCode": 404,
                    "ErrorMessage": "Not Found"
                }
            },
            "GoneError": {
                "required": [
                    "ErrorCode",
                    "ErrorMessage"
                ],
                "properties": {
                    "ErrorCode": {
                        "description": "HTTP status code",
                        "type": "integer"
                    },
                    "ErrorMessage": {
                        "description": "Error message",
                        "type": "string"
                    }
                },
                "type": "object",
                "example": {
                    "ErrorCode": 410,
                    "ErrorMessage": "Gone"
                }
            }
        },
        "securitySchemes": {
            "bearerAuth": {
                "type": "http",
                "description": "Access token in HTTP header as JWT or rJWT (_resto JWT_) - this is the default",
                "bearerFormat": "JWT",
                "scheme": "bearer"
            },
            "basicAuth": {
                "type": "http",
                "description": "Basic authentication in HTTP header - should be used first to get a valid rJWT token",
                "scheme": "basic"
            },
            "queryAuth": {
                "type": "apiKey",
                "description": "Access token in query as preseance over token in HTTP header",
                "name": "_bearer",
                "in": "query"
            }
        }
    },
    "tags": [
        {
            "name": "Collection",
            "description": "A collection is a set of features. This set is usually homogeneous (e.g. *Sentinel-2 images*) but not necessary. A collection is defined by a *model* physically described within a dedicated class under $SRC/include/resto/Models. The purpose of the model class is to convert the input collection feature format (i.e. whatever) to the resto generic format (i.e. GeoJSON) described within the RestoModel class."
        },
        {
            "name": "Feature",
            "description": "A feature is an application object that represents a physical entity e.g. a building, a river, a person, a coverage taken by a a satellite. Practically, a resto feature is defined by a set of metadata including a geographical location (i.e. a (Multi)Point, a (Multi)LineString or a (Multi)Polygon). A feature always belongs to one and only one collection."
        },
        {
            "name": "User",
            "description": "Everything about user - profile, access rights, history, etc."
        },
        {
            "name": "Catalog",
            "description": "A STAC Catalog is a collection of STAC Items"
        }
    ]
}